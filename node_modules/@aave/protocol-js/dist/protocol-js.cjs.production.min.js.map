{"version":3,"file":"protocol-js.cjs.production.min.js","sources":["../src/helpers/bignumber.ts","../src/v1/types.ts","../src/helpers/ray-math.ts","../src/helpers/constants.ts","../src/helpers/pool-math.ts","../src/v1/computations-and-formatting.ts","../src/v2/computations-and-formatting.ts","../src/tx-builder/types/index.ts","../node_modules/regenerator-runtime/runtime.js","../src/tx-builder/config/index.ts","../src/tx-builder/contract-types/factories/IAaveGovernanceV2__factory.ts","../src/tx-builder/contract-types/factories/IAaveIncentivesController__factory.ts","../src/tx-builder/contract-types/factories/IAaveStakingHelper__factory.ts","../src/tx-builder/contract-types/factories/IDebtTokenBase__factory.ts","../src/tx-builder/contract-types/factories/IERC20Detailed__factory.ts","../src/tx-builder/contract-types/factories/IFaucet__factory.ts","../src/tx-builder/contract-types/factories/IGovernancePowerDelegationToken__factory.ts","../src/tx-builder/contract-types/factories/IGovernanceStrategy__factory.ts","../src/tx-builder/contract-types/factories/IGovernanceV2Helper__factory.ts","../src/tx-builder/contract-types/factories/ILendingPool__factory.ts","../src/tx-builder/contract-types/factories/ILendToAaveMigrator__factory.ts","../src/tx-builder/contract-types/factories/IMinter__factory.ts","../src/tx-builder/contract-types/factories/IRepayWithCollateral__factory.ts","../src/tx-builder/contract-types/factories/IStakedToken__factory.ts","../src/tx-builder/contract-types/factories/IParaSwapLiquiditySwapAdapter__factory.ts","../src/tx-builder/contract-types/factories/ISynthetix__factory.ts","../src/tx-builder/contract-types/factories/IWETHGateway__factory.ts","../src/tx-builder/utils/parsings.ts","../src/tx-builder/validators/paramValidators.ts","../src/tx-builder/validators/validations.ts","../src/tx-builder/validators/methodValidators.ts","../src/tx-builder/utils/gasStation.ts","../src/tx-builder/services/BaseService.ts","../src/tx-builder/services/LiquiditySwapAdapterParaswap.ts","../src/tx-builder/services/v2/LendingPool.ts","../src/tx-builder/services/ERC20.ts","../src/tx-builder/services/Faucet.ts","../src/tx-builder/services/LTAMigrator.ts","../src/tx-builder/services/Staking.ts","../src/tx-builder/services/SynthetixService.ts","../src/tx-builder/services/IncentivesController.ts","../src/tx-builder/config/defaultConfig.ts","../src/tx-builder/txBuilder.ts","../src/tx-builder/services/WETHGateway.ts","../src/tx-builder/types/GovernanceV2MethodTypes.ts","../src/tx-builder/types/GovernanceV2ReturnTypes.ts","../src/tx-builder/services/BaseDebtToken.ts","../src/tx-builder/services/RepayWithCollateralAdapter.ts","../src/tx-builder/utils/ipfs.ts","../src/tx-builder/services/v2/AaveGovernanceV2.ts","../src/tx-builder/services/v2/GovernanceDelegationTokenService.ts","../src/tx-builder/v2.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport type BigNumberValue = string | number | BigNumber;\n\nexport const BigNumberZD = BigNumber.clone({\n  DECIMAL_PLACES: 0,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n});\n\nexport function valueToBigNumber(amount: BigNumberValue): BigNumber {\n  return new BigNumber(amount);\n}\n\nexport function valueToZDBigNumber(amount: BigNumberValue): BigNumber {\n  return new BigNumberZD(amount);\n}\n\nconst bn10 = new BigNumber(10);\n\nconst bn10PowLookup: { [key: number]: BigNumber } = {};\n\n/**\n * It's a performance optimized version of 10 ** x, which essentially memoizes previously used pows and resolves them as lookup.\n * @param decimals\n * @returns 10 ** decimals\n */\nexport function pow10(decimals: number): BigNumber {\n  if (!bn10PowLookup[decimals]) bn10PowLookup[decimals] = bn10.pow(decimals);\n  return bn10PowLookup[decimals];\n}\n\nexport function normalize(n: BigNumberValue, decimals: number): string {\n  return normalizeBN(n, decimals).toString(10);\n}\n\nexport function normalizeBN(n: BigNumberValue, decimals: number): BigNumber {\n  return valueToBigNumber(n).dividedBy(pow10(decimals));\n}\n","export enum BorrowRateMode {\n  None = 'None',\n  Stable = 'Stable',\n  Variable = 'Variable',\n}\n\nexport type ReserveRatesData = {\n  id: string;\n  symbol: string;\n  paramsHistory: {\n    variableBorrowIndex: string;\n    liquidityIndex: string;\n    timestamp: number;\n  }[];\n};\n\nexport type ReserveData = {\n  id: string;\n  underlyingAsset: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  isActive: boolean;\n  isFreezed: boolean;\n  usageAsCollateralEnabled: boolean;\n  borrowingEnabled: boolean;\n  stableBorrowRateEnabled: boolean;\n  baseLTVasCollateral: string;\n  optimalUtilisationRate: string;\n  stableRateSlope1: string;\n  stableRateSlope2: string;\n  averageStableBorrowRate: string;\n  baseVariableBorrowRate: string;\n  variableRateSlope1: string;\n  variableRateSlope2: string;\n  liquidityIndex: string;\n  reserveLiquidationThreshold: string;\n  reserveLiquidationBonus: string;\n  variableBorrowIndex: string;\n  variableBorrowRate: string;\n  avg30DaysVariableBorrowRate?: string;\n  availableLiquidity: string;\n  stableBorrowRate: string;\n  liquidityRate: string;\n  avg30DaysLiquidityRate?: string;\n  totalBorrows: string;\n  totalBorrowsStable: string;\n  totalBorrowsVariable: string;\n  totalLiquidity: string;\n  utilizationRate: string;\n  lastUpdateTimestamp: number;\n  aToken: {\n    id: string;\n  };\n  price: {\n    priceInEth: string;\n  };\n};\n\nexport type UserReserveData = {\n  principalATokenBalance: string;\n  userBalanceIndex: string;\n  redirectedBalance: string;\n  interestRedirectionAddress: string;\n  usageAsCollateralEnabledOnUser: boolean;\n  borrowRate: string;\n  borrowRateMode: BorrowRateMode;\n  originationFee: string;\n  principalBorrows: string;\n  variableBorrowIndex: string;\n  lastUpdateTimestamp: number;\n  reserve: {\n    id: string;\n    underlyingAsset: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    liquidityRate: string;\n    reserveLiquidationBonus: string;\n    lastUpdateTimestamp: number;\n    aToken: {\n      id: string;\n    };\n  };\n};\n\nexport type ComputedUserReserve = UserReserveData & {\n  currentUnderlyingBalance: string;\n  currentUnderlyingBalanceETH: string;\n  currentUnderlyingBalanceUSD: string;\n\n  currentBorrows: string;\n  currentBorrowsETH: string;\n  currentBorrowsUSD: string;\n\n  principalBorrowsETH: string;\n  principalBorrowsUSD: string;\n\n  originationFeeETH: string;\n  originationFeeUSD: string;\n};\n\nexport type UserSummaryData = {\n  id: string;\n  totalLiquidityETH: string;\n  totalCollateralETH: string;\n  totalBorrowsETH: string;\n  totalFeesETH: string;\n  totalFeesUSD: string;\n  totalLiquidityUSD: string;\n  totalCollateralUSD: string;\n  totalBorrowsUSD: string;\n  totalBorrowsWithFeesETH: string;\n  totalBorrowsWithFeesUSD: string;\n  availableBorrowsETH: string;\n  currentLoanToValue: string;\n  currentLiquidationThreshold: string;\n  maxAmountToWithdrawInEth: string;\n  healthFactor: string;\n  reservesData: ComputedUserReserve[];\n};\n","import BigNumber from 'bignumber.js';\nimport { BigNumberValue, valueToZDBigNumber } from './bignumber';\n\nexport const WAD = valueToZDBigNumber(10).pow(18);\nexport const HALF_WAD = WAD.dividedBy(2);\n\nexport const RAY = valueToZDBigNumber(10).pow(27);\nexport const HALF_RAY = RAY.dividedBy(2);\n\nexport const WAD_RAY_RATIO = valueToZDBigNumber(10).pow(9);\n\nexport function wadMul(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  return HALF_WAD.plus(valueToZDBigNumber(a).multipliedBy(b)).div(WAD);\n}\n\nexport function wadDiv(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  const halfB = valueToZDBigNumber(b).div(2);\n\n  return halfB.plus(valueToZDBigNumber(a).multipliedBy(WAD)).div(b);\n}\n\nexport function rayMul(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  return HALF_RAY.plus(valueToZDBigNumber(a).multipliedBy(b)).div(RAY);\n}\n\nexport function rayDiv(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  const halfB = valueToZDBigNumber(b).div(2);\n\n  return halfB.plus(valueToZDBigNumber(a).multipliedBy(RAY)).div(b);\n}\n\nexport function rayToWad(a: BigNumberValue): BigNumber {\n  const halfRatio = valueToZDBigNumber(WAD_RAY_RATIO).div(2);\n\n  return halfRatio.plus(a).div(WAD_RAY_RATIO);\n}\n\nexport function wadToRay(a: BigNumberValue): BigNumber {\n  return valueToZDBigNumber(a).multipliedBy(WAD_RAY_RATIO).decimalPlaces(0);\n}\n\nexport function rayPow(a: BigNumberValue, p: BigNumberValue): BigNumber {\n  let x = valueToZDBigNumber(a);\n  let n = valueToZDBigNumber(p);\n  let z = !n.modulo(2).eq(0) ? x : valueToZDBigNumber(RAY);\n\n  for (n = n.div(2); !n.eq(0); n = n.div(2)) {\n    x = rayMul(x, x);\n\n    if (!n.modulo(2).eq(0)) {\n      z = rayMul(z, x);\n    }\n  }\n  return z;\n}\n\n/**\n * RayPow is slow and gas intensive therefore in v2 we switched to binomial approximation on the contract level.\n * While the results ar not exact to the last decimal, they are close enough.\n */\nexport function binomialApproximatedRayPow(\n  a: BigNumberValue,\n  p: BigNumberValue\n): BigNumber {\n  const base = valueToZDBigNumber(a);\n  const exp = valueToZDBigNumber(p);\n  if (exp.eq(0)) return RAY;\n  const expMinusOne = exp.minus(1);\n  const expMinusTwo = exp.gt(2) ? exp.minus(2) : 0;\n\n  const basePowerTwo = rayMul(base, base);\n  const basePowerThree = rayMul(basePowerTwo, base);\n\n  const firstTerm = exp.multipliedBy(base);\n  const secondTerm = exp\n    .multipliedBy(expMinusOne)\n    .multipliedBy(basePowerTwo)\n    .div(2);\n  const thirdTerm = exp\n    .multipliedBy(expMinusOne)\n    .multipliedBy(expMinusTwo)\n    .multipliedBy(basePowerThree)\n    .div(6);\n\n  return RAY.plus(firstTerm).plus(secondTerm).plus(thirdTerm);\n}\n\nexport function rayToDecimal(a: BigNumberValue): BigNumber {\n  return valueToZDBigNumber(a).dividedBy(RAY);\n}\n","import { valueToBigNumber } from './bignumber';\n\nexport const SECONDS_PER_YEAR = valueToBigNumber('31536000');\nexport const ETH_DECIMALS = 18;\nexport const USD_DECIMALS = 10;\nexport const RAY_DECIMALS = 27;\n","import BigNumber from 'bignumber.js';\n\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  pow10,\n} from './bignumber';\nimport * as RayMath from './ray-math';\nimport { SECONDS_PER_YEAR } from './constants';\n\nexport const LTV_PRECISION = 4;\n\nexport function calculateCompoundedInterest(\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n): BigNumber {\n  const timeDelta = valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp);\n  const ratePerSecond = valueToZDBigNumber(rate).dividedBy(SECONDS_PER_YEAR);\n  return RayMath.binomialApproximatedRayPow(ratePerSecond, timeDelta);\n}\n\nexport function getCompoundedBalance(\n  _principalBalance: BigNumberValue,\n  _reserveIndex: BigNumberValue,\n  _reserveRate: BigNumberValue,\n  _lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  const principalBalance = valueToZDBigNumber(_principalBalance);\n  if (principalBalance.eq('0')) {\n    return principalBalance;\n  }\n\n  const compoundedInterest = calculateCompoundedInterest(\n    _reserveRate,\n    currentTimestamp,\n    _lastUpdateTimestamp\n  );\n  const cumulatedInterest = RayMath.rayMul(compoundedInterest, _reserveIndex);\n  const principalBalanceRay = RayMath.wadToRay(principalBalance);\n\n  return RayMath.rayToWad(\n    RayMath.rayMul(principalBalanceRay, cumulatedInterest)\n  );\n}\n\nexport const calculateLinearInterest = (\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n) => {\n  const timeDelta = RayMath.wadToRay(\n    valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp)\n  );\n  const timeDeltaInSeconds = RayMath.rayDiv(\n    timeDelta,\n    RayMath.wadToRay(SECONDS_PER_YEAR)\n  );\n  return RayMath.rayMul(rate, timeDeltaInSeconds).plus(RayMath.RAY);\n};\n\nexport function getReserveNormalizedIncome(\n  rate: BigNumberValue,\n  index: BigNumberValue,\n  lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  if (valueToZDBigNumber(rate).eq('0')) {\n    return valueToZDBigNumber(index);\n  }\n\n  const cumulatedInterest = calculateLinearInterest(\n    rate,\n    currentTimestamp,\n    lastUpdateTimestamp\n  );\n\n  return RayMath.rayMul(cumulatedInterest, index);\n}\n\nexport function getLinearBalance(\n  balance: BigNumberValue,\n  index: BigNumberValue,\n  rate: BigNumberValue,\n  lastUpdateTimestamp: number,\n  currentTimestamp: number\n) {\n  return RayMath.rayToWad(\n    RayMath.rayMul(\n      RayMath.wadToRay(balance),\n      getReserveNormalizedIncome(\n        rate,\n        index,\n        lastUpdateTimestamp,\n        currentTimestamp\n      )\n    )\n  );\n}\n\nexport function getCompoundedStableBalance(\n  _principalBalance: BigNumberValue,\n  _userStableRate: BigNumberValue,\n  _lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  const principalBalance = valueToZDBigNumber(_principalBalance);\n  if (principalBalance.eq('0')) {\n    return principalBalance;\n  }\n\n  const cumulatedInterest = calculateCompoundedInterest(\n    _userStableRate,\n    currentTimestamp,\n    _lastUpdateTimestamp\n  );\n  const principalBalanceRay = RayMath.wadToRay(principalBalance);\n\n  return RayMath.rayToWad(\n    RayMath.rayMul(principalBalanceRay, cumulatedInterest)\n  );\n}\n\nexport function calculateHealthFactorFromBalances(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  if (valueToBigNumber(borrowBalanceETH).eq(0)) {\n    return valueToBigNumber('-1'); // invalid number\n  }\n  return valueToBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLiquidationThreshold)\n    .dividedBy(pow10(LTV_PRECISION))\n    .div(borrowBalanceETH);\n}\n\nexport function calculateHealthFactorFromBalancesBigUnits(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  return calculateHealthFactorFromBalances(\n    collateralBalanceETH,\n    borrowBalanceETH,\n    new BigNumber(currentLiquidationThreshold)\n      .multipliedBy(pow10(LTV_PRECISION))\n      .decimalPlaces(0, BigNumber.ROUND_DOWN)\n  );\n}\n\nexport function calculateAvailableBorrowsETH(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLtv: BigNumberValue\n): BigNumber {\n  if (valueToZDBigNumber(currentLtv).eq(0)) {\n    return valueToZDBigNumber('0');\n  }\n  const availableBorrowsETH = valueToZDBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLtv)\n    .dividedBy(pow10(LTV_PRECISION))\n    .minus(borrowBalanceETH);\n  return availableBorrowsETH.gt('0')\n    ? availableBorrowsETH\n    : valueToZDBigNumber('0');\n}\n\nexport function calculateAverageRate(\n  index0: string,\n  index1: string,\n  timestamp0: number,\n  timestamp1: number\n): string {\n  return valueToBigNumber(index1)\n    .dividedBy(index0)\n    .minus('1')\n    .dividedBy(timestamp1 - timestamp0)\n    .multipliedBy(SECONDS_PER_YEAR)\n    .toString();\n}\n","import BigNumber from 'bignumber.js';\nimport * as RayMath from '../helpers/ray-math';\nimport {\n  ReserveData,\n  ComputedUserReserve,\n  UserReserveData,\n  UserSummaryData,\n  BorrowRateMode,\n  ReserveRatesData,\n} from './types';\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  normalize,\n  pow10,\n} from '../helpers/bignumber';\nimport {\n  ETH_DECIMALS,\n  RAY_DECIMALS,\n  SECONDS_PER_YEAR,\n  USD_DECIMALS,\n} from '../helpers/constants';\nimport {\n  calculateAverageRate,\n  getReserveNormalizedIncome,\n} from '../helpers/pool-math';\n\nexport type GetCompoundedBorrowBalanceParamsReserve = Pick<\n  ReserveData,\n  'variableBorrowRate' | 'lastUpdateTimestamp' | 'variableBorrowIndex'\n>;\nexport type GetCompoundedBorrowBalanceParamsUserReserve = Pick<\n  UserReserveData,\n  | 'principalBorrows'\n  | 'borrowRateMode'\n  | 'variableBorrowIndex'\n  | 'borrowRate'\n  | 'lastUpdateTimestamp'\n>;\n\nexport function getCompoundedBorrowBalance(\n  reserve: GetCompoundedBorrowBalanceParamsReserve,\n  userReserve: GetCompoundedBorrowBalanceParamsUserReserve,\n  currentTimestamp: number\n): BigNumber {\n  const principalBorrows = valueToZDBigNumber(userReserve.principalBorrows);\n  if (principalBorrows.eq('0')) {\n    return valueToZDBigNumber('0');\n  }\n\n  let cumulatedInterest;\n  if (userReserve.borrowRateMode === BorrowRateMode.Variable) {\n    const compoundedInterest = calculateCompoundedInterest(\n      reserve.variableBorrowRate,\n      currentTimestamp,\n      reserve.lastUpdateTimestamp\n    );\n\n    cumulatedInterest = RayMath.rayDiv(\n      RayMath.rayMul(compoundedInterest, reserve.variableBorrowIndex),\n      userReserve.variableBorrowIndex\n    );\n  } else {\n    // if stable\n    cumulatedInterest = calculateCompoundedInterest(\n      userReserve.borrowRate,\n      currentTimestamp,\n      userReserve.lastUpdateTimestamp\n    );\n  }\n\n  const borrowBalanceRay = RayMath.wadToRay(principalBorrows);\n\n  return RayMath.rayToWad(RayMath.rayMul(borrowBalanceRay, cumulatedInterest));\n}\n\nexport const calculateCompoundedInterest = (\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n): BigNumber => {\n  const timeDelta = valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp);\n  const ratePerSecond = valueToZDBigNumber(rate).dividedBy(SECONDS_PER_YEAR);\n  return RayMath.binomialApproximatedRayPow(ratePerSecond, timeDelta);\n};\n\nexport function calculateHealthFactorFromBalances(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  if (valueToBigNumber(borrowBalanceETH).eq(0)) {\n    return valueToBigNumber('-1'); // invalid number\n  }\n  return valueToBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLiquidationThreshold)\n    .dividedBy(100)\n    .div(valueToBigNumber(borrowBalanceETH).plus(totalFeesETH));\n}\n\nexport function calculateHealthFactorFromBalancesBigUnits(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  return calculateHealthFactorFromBalances(\n    collateralBalanceETH,\n    borrowBalanceETH,\n    totalFeesETH,\n    new BigNumber(currentLiquidationThreshold)\n      .multipliedBy(100)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN)\n  );\n}\n\nexport function calculateAvailableBorrowsETH(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLtv: BigNumberValue\n): BigNumber {\n  if (valueToZDBigNumber(currentLtv).eq(0)) {\n    return valueToZDBigNumber('0');\n  }\n  let availableBorrowsETH = valueToZDBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLtv)\n    .dividedBy(100);\n  if (availableBorrowsETH.lt(borrowBalanceETH)) {\n    return valueToZDBigNumber('0');\n  }\n  availableBorrowsETH = availableBorrowsETH\n    .minus(borrowBalanceETH)\n    .minus(totalFeesETH);\n  const borrowFee = availableBorrowsETH.multipliedBy('0.0025');\n  return availableBorrowsETH.minus(borrowFee);\n}\n\nexport type CalculateCumulatedBalancePoolReserve = {\n  liquidityRate: BigNumberValue;\n  liquidityIndex: BigNumberValue;\n  lastUpdateTimestamp: number;\n};\nexport type CalculateCumulatedBalanceUserReserve = Pick<\n  UserReserveData,\n  'userBalanceIndex'\n>;\n\nexport function calculateCumulatedBalance(\n  balance: BigNumberValue,\n  userReserve: CalculateCumulatedBalanceUserReserve,\n  poolReserve: CalculateCumulatedBalancePoolReserve,\n  currentTimestamp: number\n): BigNumber {\n  return RayMath.rayToWad(\n    RayMath.rayDiv(\n      RayMath.rayMul(\n        RayMath.wadToRay(balance),\n        getReserveNormalizedIncome(\n          poolReserve.liquidityRate,\n          poolReserve.liquidityIndex,\n          poolReserve.lastUpdateTimestamp,\n          currentTimestamp\n        )\n      ),\n      userReserve.userBalanceIndex\n    )\n  );\n}\n\nexport type CalculateCurrentUnderlyingBalancePoolReserve = CalculateCumulatedBalancePoolReserve;\nexport type CalculateCurrentUnderlyingBalanceUserReserve = CalculateCumulatedBalanceUserReserve &\n  Pick<\n    UserReserveData,\n    | 'principalATokenBalance'\n    | 'redirectedBalance'\n    | 'interestRedirectionAddress'\n  >;\n\nexport function calculateCurrentUnderlyingBalance(\n  userReserve: CalculateCurrentUnderlyingBalanceUserReserve,\n  poolReserve: CalculateCurrentUnderlyingBalancePoolReserve,\n  currentTimestamp: number\n): BigNumber {\n  if (\n    userReserve.principalATokenBalance === '0' &&\n    userReserve.redirectedBalance === '0'\n  ) {\n    return valueToZDBigNumber('0');\n  }\n  if (\n    userReserve.interestRedirectionAddress !==\n    '0x0000000000000000000000000000000000000000'\n  ) {\n    return valueToZDBigNumber(userReserve.principalATokenBalance).plus(\n      calculateCumulatedBalance(\n        userReserve.redirectedBalance,\n        userReserve,\n        poolReserve,\n        currentTimestamp\n      ).minus(userReserve.redirectedBalance)\n    );\n  }\n  return calculateCumulatedBalance(\n    valueToBigNumber(userReserve.redirectedBalance)\n      .plus(userReserve.principalATokenBalance)\n      .toString(),\n    userReserve,\n    poolReserve,\n    currentTimestamp\n  ).minus(userReserve.redirectedBalance);\n}\n\nfunction computeUserReserveData(\n  poolReserve: ReserveData,\n  userReserve: UserReserveData,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): ComputedUserReserve {\n  const {\n    price: { priceInEth },\n    decimals,\n  } = poolReserve;\n  const currentUnderlyingBalance = calculateCurrentUnderlyingBalance(\n    userReserve,\n    poolReserve,\n    currentTimestamp\n  );\n  const currentUnderlyingBalanceETH = currentUnderlyingBalance\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const currentUnderlyingBalanceUSD = currentUnderlyingBalanceETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const principalBorrowsETH = valueToZDBigNumber(userReserve.principalBorrows)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const principalBorrowsUSD = principalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const currentBorrows = getCompoundedBorrowBalance(\n    poolReserve,\n    userReserve,\n    currentTimestamp\n  );\n  const currentBorrowsETH = currentBorrows\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const currentBorrowsUSD = currentBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const originationFeeETH = valueToZDBigNumber(userReserve.originationFee)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const originationFeeUSD = originationFeeETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  return {\n    ...userReserve,\n    principalBorrowsUSD,\n    currentBorrowsUSD,\n    originationFeeUSD,\n    currentUnderlyingBalanceUSD,\n    originationFeeETH: originationFeeETH.toString(),\n    currentBorrows: currentBorrows.toString(),\n    currentBorrowsETH: currentBorrowsETH.toString(),\n    principalBorrowsETH: principalBorrowsETH.toString(),\n    currentUnderlyingBalance: currentUnderlyingBalance.toFixed(),\n    currentUnderlyingBalanceETH: currentUnderlyingBalanceETH.toFixed(),\n  };\n}\n\nexport function computeRawUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  let totalLiquidityETH = valueToZDBigNumber('0');\n  let totalCollateralETH = valueToZDBigNumber('0');\n  let totalBorrowsETH = valueToZDBigNumber('0');\n  let totalFeesETH = valueToZDBigNumber('0');\n  let currentLtv = valueToBigNumber('0');\n  let currentLiquidationThreshold = valueToBigNumber('0');\n\n  const userReservesData = rawUserReserves\n    .map((userReserve) => {\n      const poolReserve = poolReservesData.find(\n        (reserve) => reserve.id === userReserve.reserve.id\n      );\n      if (!poolReserve) {\n        throw new Error(\n          'Reserve is not registered on platform, please contact support'\n        );\n      }\n      const computedUserReserve = computeUserReserveData(\n        poolReserve,\n        userReserve,\n        usdPriceEth,\n        currentTimestamp\n      );\n      totalLiquidityETH = totalLiquidityETH.plus(\n        computedUserReserve.currentUnderlyingBalanceETH\n      );\n      totalBorrowsETH = totalBorrowsETH.plus(\n        computedUserReserve.currentBorrowsETH\n      );\n      totalFeesETH = totalFeesETH.plus(computedUserReserve.originationFeeETH);\n\n      // asset enabled as collateral\n      if (\n        poolReserve.usageAsCollateralEnabled &&\n        userReserve.usageAsCollateralEnabledOnUser\n      ) {\n        totalCollateralETH = totalCollateralETH.plus(\n          computedUserReserve.currentUnderlyingBalanceETH\n        );\n        currentLtv = currentLtv.plus(\n          valueToBigNumber(\n            computedUserReserve.currentUnderlyingBalanceETH\n          ).multipliedBy(poolReserve.baseLTVasCollateral)\n        );\n        currentLiquidationThreshold = currentLiquidationThreshold.plus(\n          valueToBigNumber(\n            computedUserReserve.currentUnderlyingBalanceETH\n          ).multipliedBy(poolReserve.reserveLiquidationThreshold)\n        );\n      }\n      return computedUserReserve;\n    })\n    .sort((a, b) =>\n      a.reserve.symbol > b.reserve.symbol\n        ? 1\n        : a.reserve.symbol < b.reserve.symbol\n        ? -1\n        : 0\n    );\n\n  if (currentLtv.gt(0)) {\n    currentLtv = currentLtv\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n  if (currentLiquidationThreshold.gt(0)) {\n    currentLiquidationThreshold = currentLiquidationThreshold\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n\n  const healthFactor = calculateHealthFactorFromBalances(\n    totalCollateralETH,\n    totalBorrowsETH,\n    totalFeesETH,\n    currentLiquidationThreshold\n  );\n\n  const totalCollateralUSD = totalCollateralETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalLiquidityUSD = totalLiquidityETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalBorrowsUSD = totalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalFeesUSD = totalFeesETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth);\n\n  const totalBorrowsWithFeesETH = totalFeesETH.plus(totalBorrowsETH);\n  const totalBorrowsWithFeesUSD = totalFeesUSD.plus(totalBorrowsUSD);\n  const availableBorrowsETH = calculateAvailableBorrowsETH(\n    totalCollateralETH,\n    totalBorrowsETH,\n    totalFeesETH,\n    currentLtv\n  );\n\n  const totalBorrowsAndFeesETH = totalBorrowsETH.plus(totalFeesETH);\n  const maxAmountToWithdrawInEth = totalLiquidityETH.minus(\n    totalBorrowsAndFeesETH.eq(0)\n      ? '0'\n      : totalBorrowsAndFeesETH\n          .multipliedBy(100)\n          .dividedBy(currentLiquidationThreshold)\n  );\n\n  return {\n    totalLiquidityUSD,\n    totalCollateralUSD,\n    totalBorrowsUSD,\n    id: userId,\n    totalLiquidityETH: totalLiquidityETH.toString(),\n    totalCollateralETH: totalCollateralETH.toString(),\n    totalFeesETH: totalFeesETH.toString(),\n    totalBorrowsETH: totalBorrowsETH.toString(),\n    availableBorrowsETH: availableBorrowsETH.toString(),\n    currentLoanToValue: currentLtv.toString(),\n    currentLiquidationThreshold: currentLiquidationThreshold.toString(),\n    maxAmountToWithdrawInEth: maxAmountToWithdrawInEth.toString(),\n    healthFactor: healthFactor.toString(),\n    reservesData: userReservesData,\n    totalFeesUSD: totalFeesUSD.toString(),\n    totalBorrowsWithFeesETH: totalBorrowsWithFeesETH.toString(),\n    totalBorrowsWithFeesUSD: totalBorrowsWithFeesUSD.toString(),\n  };\n}\n\nexport function formatUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  const userData = computeRawUserSummaryData(\n    poolReservesData,\n    rawUserReserves,\n    userId,\n    usdPriceEth,\n    currentTimestamp\n  );\n  const userReservesData = userData.reservesData.map(\n    ({ reserve, ...userReserve }): ComputedUserReserve => {\n      const reserveDecimals = reserve.decimals;\n      return {\n        ...userReserve,\n        reserve: {\n          ...reserve,\n          reserveLiquidationBonus: normalize(\n            valueToBigNumber(reserve.reserveLiquidationBonus).minus(100),\n            2\n          ),\n          liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n        },\n        redirectedBalance: normalize(\n          userReserve.redirectedBalance,\n          reserveDecimals\n        ),\n        principalATokenBalance: normalize(\n          userReserve.principalATokenBalance,\n          reserveDecimals\n        ),\n        borrowRate: normalize(userReserve.borrowRate, RAY_DECIMALS),\n        lastUpdateTimestamp: userReserve.lastUpdateTimestamp,\n        variableBorrowIndex: normalize(\n          userReserve.variableBorrowIndex,\n          RAY_DECIMALS\n        ),\n        userBalanceIndex: normalize(userReserve.userBalanceIndex, RAY_DECIMALS),\n        currentUnderlyingBalance: normalize(\n          userReserve.currentUnderlyingBalance,\n          reserveDecimals\n        ),\n        currentUnderlyingBalanceETH: normalize(\n          userReserve.currentUnderlyingBalanceETH,\n          ETH_DECIMALS\n        ),\n        currentUnderlyingBalanceUSD: normalize(\n          userReserve.currentUnderlyingBalanceUSD,\n          USD_DECIMALS\n        ),\n        principalBorrows: normalize(\n          userReserve.principalBorrows,\n          reserveDecimals\n        ),\n        principalBorrowsETH: normalize(\n          userReserve.principalBorrowsETH,\n          ETH_DECIMALS\n        ),\n        principalBorrowsUSD: normalize(\n          userReserve.principalBorrowsUSD,\n          USD_DECIMALS\n        ),\n        currentBorrows: normalize(userReserve.currentBorrows, reserveDecimals),\n        currentBorrowsETH: normalize(\n          userReserve.currentBorrowsETH,\n          ETH_DECIMALS\n        ),\n        currentBorrowsUSD: normalize(\n          userReserve.currentBorrowsUSD,\n          USD_DECIMALS\n        ),\n        originationFee: normalize(userReserve.originationFee, reserveDecimals),\n        originationFeeETH: normalize(\n          userReserve.originationFeeETH,\n          ETH_DECIMALS\n        ),\n        originationFeeUSD: normalize(\n          userReserve.originationFeeUSD,\n          USD_DECIMALS\n        ),\n      };\n    }\n  );\n  return {\n    id: userData.id,\n    reservesData: userReservesData,\n    totalLiquidityETH: normalize(userData.totalLiquidityETH, ETH_DECIMALS),\n    totalLiquidityUSD: normalize(userData.totalLiquidityUSD, USD_DECIMALS),\n    totalCollateralETH: normalize(userData.totalCollateralETH, ETH_DECIMALS),\n    totalCollateralUSD: normalize(userData.totalCollateralUSD, USD_DECIMALS),\n    totalFeesETH: normalize(userData.totalFeesETH, ETH_DECIMALS),\n    totalFeesUSD: normalize(userData.totalFeesUSD, USD_DECIMALS),\n    totalBorrowsETH: normalize(userData.totalBorrowsETH, ETH_DECIMALS),\n    totalBorrowsUSD: normalize(userData.totalBorrowsUSD, USD_DECIMALS),\n    totalBorrowsWithFeesETH: normalize(\n      userData.totalBorrowsWithFeesETH,\n      ETH_DECIMALS\n    ),\n    totalBorrowsWithFeesUSD: normalize(\n      userData.totalBorrowsWithFeesUSD,\n      USD_DECIMALS\n    ),\n    availableBorrowsETH: normalize(userData.availableBorrowsETH, ETH_DECIMALS),\n    currentLoanToValue: normalize(userData.currentLoanToValue, 2),\n    currentLiquidationThreshold: normalize(\n      userData.currentLiquidationThreshold,\n      2\n    ),\n    maxAmountToWithdrawInEth: normalize(\n      userData.maxAmountToWithdrawInEth,\n      ETH_DECIMALS\n    ),\n    healthFactor: userData.healthFactor,\n  };\n}\n\nexport function formatReserves(\n  reserves: ReserveData[],\n  reserveIndexes30DaysAgo?: ReserveRatesData[]\n): ReserveData[] {\n  return reserves.map((reserve) => {\n    const reserve30DaysAgo = reserveIndexes30DaysAgo?.find(\n      (res) => res.id === reserve.id\n    )?.paramsHistory?.[0];\n\n    return {\n      ...reserve,\n      price: {\n        ...reserve.price,\n        priceInEth: normalize(reserve.price.priceInEth, ETH_DECIMALS),\n      },\n      baseLTVasCollateral: normalize(reserve.baseLTVasCollateral, 2),\n      variableBorrowRate: normalize(reserve.variableBorrowRate, RAY_DECIMALS),\n      avg30DaysVariableBorrowRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.variableBorrowIndex,\n            reserve.variableBorrowIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n      avg30DaysLiquidityRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.liquidityIndex,\n            reserve.liquidityIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n\n      stableBorrowRate: normalize(reserve.stableBorrowRate, RAY_DECIMALS),\n      liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n      totalLiquidity: normalize(reserve.totalLiquidity, reserve.decimals),\n      availableLiquidity: normalize(\n        reserve.availableLiquidity,\n        reserve.decimals\n      ),\n      liquidityIndex: normalize(reserve.liquidityIndex, RAY_DECIMALS),\n      reserveLiquidationThreshold: normalize(\n        reserve.reserveLiquidationThreshold,\n        2\n      ),\n      reserveLiquidationBonus: normalize(\n        valueToBigNumber(reserve.reserveLiquidationBonus).minus(100),\n        2\n      ),\n      totalBorrows: normalize(reserve.totalBorrows, reserve.decimals),\n      totalBorrowsVariable: normalize(\n        reserve.totalBorrowsVariable,\n        reserve.decimals\n      ),\n      totalBorrowsStable: normalize(\n        reserve.totalBorrowsStable,\n        reserve.decimals\n      ),\n      variableBorrowIndex: normalize(reserve.variableBorrowIndex, RAY_DECIMALS),\n    };\n  });\n}\n\nexport function calculateInterestRates(\n  reserve: ReserveData,\n  amountToDeposit: BigNumberValue,\n  amountToBorrow: BigNumberValue,\n  borrowMode: 'stable' | 'variable' = 'variable'\n) {\n  const { optimalUtilisationRate } = reserve;\n  const baseVariableBorrowRate = valueToBigNumber(\n    reserve.baseVariableBorrowRate\n  );\n  const totalBorrowsStable = valueToBigNumber(reserve.totalBorrowsStable).plus(\n    borrowMode === 'stable' ? amountToBorrow : '0'\n  );\n  const totalBorrowsVariable = valueToBigNumber(\n    reserve.totalBorrowsVariable\n  ).plus(borrowMode === 'variable' ? amountToBorrow : '0');\n  const totalBorrows = totalBorrowsStable.plus(totalBorrowsVariable);\n  const totalDeposits = valueToBigNumber(reserve.totalLiquidity).plus(\n    amountToDeposit\n  );\n  const utilizationRate =\n    totalDeposits.eq(0) && totalBorrows.eq(0)\n      ? valueToBigNumber(0)\n      : totalBorrows.dividedBy(totalDeposits);\n\n  let currentStableBorrowRate = valueToBigNumber(reserve.stableBorrowRate);\n  let currentVariableBorrowRate = valueToBigNumber(0);\n  let currentLiquidityRate = valueToBigNumber(0);\n\n  if (utilizationRate.gt(optimalUtilisationRate)) {\n    const excessUtilizationRateRatio = utilizationRate\n      .minus(optimalUtilisationRate)\n      .dividedBy(valueToBigNumber(1).minus(optimalUtilisationRate));\n\n    currentStableBorrowRate = currentStableBorrowRate\n      .plus(reserve.stableRateSlope1)\n      .plus(excessUtilizationRateRatio.multipliedBy(reserve.stableRateSlope2));\n    currentVariableBorrowRate = baseVariableBorrowRate\n      .plus(reserve.variableRateSlope1)\n      .plus(\n        excessUtilizationRateRatio.multipliedBy(reserve.variableRateSlope2)\n      );\n  } else {\n    currentStableBorrowRate = currentVariableBorrowRate.plus(\n      utilizationRate\n        .dividedBy(optimalUtilisationRate)\n        .multipliedBy(reserve.stableRateSlope1)\n    );\n    currentVariableBorrowRate = baseVariableBorrowRate.plus(\n      utilizationRate\n        .dividedBy(optimalUtilisationRate)\n        .multipliedBy(reserve.variableRateSlope1)\n    );\n  }\n\n  if (!totalBorrows.eq(0)) {\n    const weightedVariableRate = currentVariableBorrowRate.multipliedBy(\n      totalBorrowsVariable\n    );\n    const weightedStableRate = valueToBigNumber(\n      reserve.averageStableBorrowRate\n    ).multipliedBy(totalBorrowsStable);\n\n    currentLiquidityRate = weightedVariableRate\n      .plus(weightedStableRate)\n      .dividedBy(totalBorrows);\n  }\n\n  return {\n    variableBorrowRate: currentVariableBorrowRate.toString(),\n    stableBorrowRate: currentStableBorrowRate.toString(),\n    liquidityRate: currentLiquidityRate.toString(),\n  };\n}\n","import BigNumber from 'bignumber.js';\n\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  normalize,\n  pow10,\n  normalizeBN,\n} from '../helpers/bignumber';\nimport {\n  calculateAvailableBorrowsETH,\n  calculateHealthFactorFromBalances,\n  getCompoundedBalance,\n  getCompoundedStableBalance,\n  calculateAverageRate,\n  LTV_PRECISION,\n  calculateCompoundedInterest,\n  getLinearBalance,\n} from '../helpers/pool-math';\nimport { RAY, rayDiv, rayMul, rayPow } from '../helpers/ray-math';\nimport {\n  ComputedUserReserve,\n  ReserveData,\n  UserReserveData,\n  UserSummaryData,\n  ReserveRatesData,\n  ComputedReserveData,\n  Supplies,\n  ReserveSupplyData,\n  RewardsInformation,\n} from './types';\nimport {\n  ETH_DECIMALS,\n  RAY_DECIMALS,\n  SECONDS_PER_YEAR,\n  USD_DECIMALS,\n} from '../helpers/constants';\n\nexport function getEthAndUsdBalance(\n  balance: BigNumberValue,\n  priceInEth: BigNumberValue,\n  decimals: number,\n  usdPriceEth: BigNumberValue\n): [string, string] {\n  const balanceInEth = valueToZDBigNumber(balance)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const balanceInUsd = balanceInEth\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n  return [balanceInEth.toString(), balanceInUsd];\n}\n\n/*\ntype ComputeUserReserveDataPoolReserve = Pick<\n  ReserveData,\n  | 'price'\n  | 'decimals'\n  | 'liquidityIndex'\n  | 'liquidityRate'\n  | 'lastUpdateTimestamp'\n  | 'variableBorrowIndex'\n  | 'variableBorrowRate'\n>;\n\ntype ComputeUserReserveDataUserReserve = Pick<\n  UserReserveData,\n  | 'scaledATokenBalance'\n  | 'scaledVariableDebt'\n  | 'principalStableDebt'\n  | 'stableBorrowRate'\n  | 'stableBorrowLastUpdateTimestamp'\n>;\n*/\n\nexport function computeUserReserveData(\n  poolReserve: ReserveData,\n  userReserve: UserReserveData,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number,\n  rewardsInfo: RewardsInformation\n): ComputedUserReserve {\n  const {\n    price: { priceInEth },\n    decimals,\n  } = poolReserve;\n  const underlyingBalance = getLinearBalance(\n    userReserve.scaledATokenBalance,\n    poolReserve.liquidityIndex,\n    poolReserve.liquidityRate,\n    poolReserve.lastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n  const [underlyingBalanceETH, underlyingBalanceUSD] = getEthAndUsdBalance(\n    underlyingBalance,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  const variableBorrows = getCompoundedBalance(\n    userReserve.scaledVariableDebt,\n    poolReserve.variableBorrowIndex,\n    poolReserve.variableBorrowRate,\n    poolReserve.lastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n\n  const [variableBorrowsETH, variableBorrowsUSD] = getEthAndUsdBalance(\n    variableBorrows,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  const stableBorrows = getCompoundedStableBalance(\n    userReserve.principalStableDebt,\n    poolReserve.stableBorrowRate,\n    userReserve.stableBorrowLastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n\n  const [stableBorrowsETH, stableBorrowsUSD] = getEthAndUsdBalance(\n    stableBorrows,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n  const {\n    totalLiquidity,\n    totalStableDebt,\n    totalVariableDebt,\n  } = calculateSupplies(\n    {\n      totalScaledVariableDebt: poolReserve.totalScaledVariableDebt,\n      variableBorrowIndex: poolReserve.variableBorrowIndex,\n      variableBorrowRate: poolReserve.variableBorrowRate,\n      totalPrincipalStableDebt: poolReserve.totalPrincipalStableDebt,\n      averageStableRate: poolReserve.averageStableRate,\n      availableLiquidity: poolReserve.availableLiquidity,\n      stableDebtLastUpdateTimestamp: poolReserve.stableDebtLastUpdateTimestamp,\n      lastUpdateTimestamp: poolReserve.lastUpdateTimestamp,\n    },\n    currentTimestamp\n  );\n\n  const aTokenRewards = totalLiquidity.gt(0)\n    ? calculateRewards(\n        userReserve.scaledATokenBalance,\n        poolReserve.aTokenIncentivesIndex,\n        userReserve.aTokenincentivesUserIndex,\n        rewardsInfo.incentivePrecision,\n        rewardsInfo.rewardTokenDecimals,\n        poolReserve.aIncentivesLastUpdateTimestamp,\n        poolReserve.aEmissionPerSecond,\n        rayDiv(totalLiquidity, poolReserve.liquidityIndex),\n        currentTimestamp,\n        rewardsInfo.emissionEndTimestamp\n      )\n    : '0';\n\n  const [aTokenRewardsETH, aTokenRewardsUSD] = getEthAndUsdBalance(\n    aTokenRewards,\n    rewardsInfo.rewardTokenPriceEth,\n    rewardsInfo.rewardTokenDecimals,\n    usdPriceEth\n  );\n\n  const vTokenRewards = totalVariableDebt.gt(0)\n    ? calculateRewards(\n        userReserve.scaledVariableDebt,\n        poolReserve.vTokenIncentivesIndex,\n        userReserve.vTokenincentivesUserIndex,\n        rewardsInfo.incentivePrecision,\n        rewardsInfo.rewardTokenDecimals,\n        poolReserve.vIncentivesLastUpdateTimestamp,\n        poolReserve.vEmissionPerSecond,\n        new BigNumber(poolReserve.totalScaledVariableDebt),\n        currentTimestamp,\n        rewardsInfo.emissionEndTimestamp\n      )\n    : '0';\n\n  const [vTokenRewardsETH, vTokenRewardsUSD] = getEthAndUsdBalance(\n    vTokenRewards,\n    rewardsInfo.rewardTokenPriceEth,\n    rewardsInfo.rewardTokenDecimals,\n    usdPriceEth\n  );\n  const sTokenRewards = totalStableDebt.gt(0)\n    ? calculateRewards(\n        userReserve.principalStableDebt,\n        poolReserve.sTokenIncentivesIndex,\n        userReserve.sTokenincentivesUserIndex,\n        rewardsInfo.incentivePrecision,\n        rewardsInfo.rewardTokenDecimals,\n        poolReserve.sIncentivesLastUpdateTimestamp,\n        poolReserve.sEmissionPerSecond,\n        new BigNumber(poolReserve.totalPrincipalStableDebt),\n        currentTimestamp,\n        rewardsInfo.emissionEndTimestamp\n      )\n    : '0';\n\n  const [sTokenRewardsETH, sTokenRewardsUSD] = getEthAndUsdBalance(\n    sTokenRewards,\n    rewardsInfo.rewardTokenPriceEth,\n    rewardsInfo.rewardTokenDecimals,\n    usdPriceEth\n  );\n\n  const exactStableBorrowRate = rayPow(\n    valueToZDBigNumber(userReserve.stableBorrowRate)\n      .dividedBy(SECONDS_PER_YEAR)\n      .plus(RAY),\n    SECONDS_PER_YEAR\n  ).minus(RAY);\n\n  return {\n    ...userReserve,\n    underlyingBalance,\n    underlyingBalanceETH,\n    underlyingBalanceUSD,\n    variableBorrows,\n    variableBorrowsETH,\n    variableBorrowsUSD,\n    stableBorrows,\n    stableBorrowsETH,\n    stableBorrowsUSD,\n    totalBorrows: valueToZDBigNumber(variableBorrows)\n      .plus(stableBorrows)\n      .toString(),\n    totalBorrowsETH: valueToZDBigNumber(variableBorrowsETH)\n      .plus(stableBorrowsETH)\n      .toString(),\n    totalBorrowsUSD: valueToZDBigNumber(variableBorrowsUSD)\n      .plus(stableBorrowsUSD)\n      .toString(),\n    aTokenRewards,\n    aTokenRewardsETH,\n    aTokenRewardsUSD,\n    vTokenRewards,\n    vTokenRewardsETH,\n    vTokenRewardsUSD,\n    sTokenRewards,\n    sTokenRewardsETH,\n    sTokenRewardsUSD,\n    totalRewards: valueToZDBigNumber(aTokenRewards)\n      .plus(vTokenRewards)\n      .plus(sTokenRewards)\n      .toString(),\n    totalRewardsETH: valueToZDBigNumber(aTokenRewardsETH)\n      .plus(vTokenRewardsETH)\n      .plus(sTokenRewardsETH)\n      .toString(),\n    totalRewardsUSD: valueToZDBigNumber(aTokenRewardsUSD)\n      .plus(vTokenRewardsUSD)\n      .plus(sTokenRewardsUSD)\n      .toString(),\n    stableBorrowAPR: normalize(userReserve.stableBorrowRate, RAY_DECIMALS),\n    stableBorrowAPY: normalize(exactStableBorrowRate, RAY_DECIMALS),\n  };\n}\n\nexport function computeRawUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number,\n  rewardsInfo: RewardsInformation\n): UserSummaryData {\n  let totalLiquidityETH = valueToZDBigNumber('0');\n  let totalCollateralETH = valueToZDBigNumber('0');\n  let totalBorrowsETH = valueToZDBigNumber('0');\n  let currentLtv = valueToBigNumber('0');\n  let currentLiquidationThreshold = valueToBigNumber('0');\n\n  let totalRewards = valueToBigNumber('0');\n  let totalRewardsETH = valueToBigNumber('0');\n  let totalRewardsUSD = valueToBigNumber('0');\n\n  const userReservesData = rawUserReserves\n    .map((userReserve) => {\n      const poolReserve = poolReservesData.find(\n        (reserve) => reserve.id === userReserve.reserve.id\n      );\n      if (!poolReserve) {\n        throw new Error(\n          'Reserve is not registered on platform, please contact support'\n        );\n      }\n      const computedUserReserve = computeUserReserveData(\n        poolReserve,\n        userReserve,\n        usdPriceEth,\n        currentTimestamp,\n        rewardsInfo\n      );\n\n      totalRewards = totalRewards.plus(computedUserReserve.totalRewards);\n      totalRewardsETH = totalRewardsETH.plus(\n        computedUserReserve.totalRewardsETH\n      );\n      totalRewardsUSD = totalRewardsUSD.plus(\n        computedUserReserve.totalRewardsUSD\n      );\n\n      totalLiquidityETH = totalLiquidityETH.plus(\n        computedUserReserve.underlyingBalanceETH\n      );\n      totalBorrowsETH = totalBorrowsETH\n        .plus(computedUserReserve.variableBorrowsETH)\n        .plus(computedUserReserve.stableBorrowsETH);\n\n      // asset enabled as collateral\n      if (\n        poolReserve.usageAsCollateralEnabled &&\n        userReserve.usageAsCollateralEnabledOnUser\n      ) {\n        totalCollateralETH = totalCollateralETH.plus(\n          computedUserReserve.underlyingBalanceETH\n        );\n        currentLtv = currentLtv.plus(\n          valueToBigNumber(\n            computedUserReserve.underlyingBalanceETH\n          ).multipliedBy(poolReserve.baseLTVasCollateral)\n        );\n        currentLiquidationThreshold = currentLiquidationThreshold.plus(\n          valueToBigNumber(\n            computedUserReserve.underlyingBalanceETH\n          ).multipliedBy(poolReserve.reserveLiquidationThreshold)\n        );\n      }\n      return computedUserReserve;\n    })\n    .sort((a, b) =>\n      a.reserve.symbol > b.reserve.symbol\n        ? 1\n        : a.reserve.symbol < b.reserve.symbol\n        ? -1\n        : 0\n    );\n\n  if (currentLtv.gt(0)) {\n    currentLtv = currentLtv\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n  if (currentLiquidationThreshold.gt(0)) {\n    currentLiquidationThreshold = currentLiquidationThreshold\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n\n  const healthFactor = calculateHealthFactorFromBalances(\n    totalCollateralETH,\n    totalBorrowsETH,\n    currentLiquidationThreshold\n  );\n\n  const totalCollateralUSD = totalCollateralETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalLiquidityUSD = totalLiquidityETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalBorrowsUSD = totalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const availableBorrowsETH = calculateAvailableBorrowsETH(\n    totalCollateralETH,\n    totalBorrowsETH,\n    currentLtv\n  );\n\n  return {\n    totalLiquidityUSD,\n    totalCollateralUSD,\n    totalBorrowsUSD,\n    totalRewards: totalRewards.toString(),\n    totalRewardsETH: totalRewardsETH.toString(),\n    totalRewardsUSD: totalRewardsUSD.toString(),\n    id: userId,\n    totalLiquidityETH: totalLiquidityETH.toString(),\n    totalCollateralETH: totalCollateralETH.toString(),\n    totalBorrowsETH: totalBorrowsETH.toString(),\n    availableBorrowsETH: availableBorrowsETH.toString(),\n    currentLoanToValue: currentLtv.toString(),\n    currentLiquidationThreshold: currentLiquidationThreshold.toString(),\n    healthFactor: healthFactor.toString(),\n    reservesData: userReservesData,\n  };\n}\n\nexport function formatUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number,\n  rewardsInfo: RewardsInformation\n): UserSummaryData {\n  const userData = computeRawUserSummaryData(\n    poolReservesData,\n    rawUserReserves,\n    userId,\n    usdPriceEth,\n    currentTimestamp,\n    rewardsInfo\n  );\n  const userReservesData = userData.reservesData.map(\n    ({ reserve, ...userReserve }): ComputedUserReserve => {\n      const reserveDecimals = reserve.decimals;\n\n      const exactStableBorrowRate = rayPow(\n        valueToZDBigNumber(userReserve.stableBorrowRate)\n          .dividedBy(SECONDS_PER_YEAR)\n          .plus(RAY),\n        SECONDS_PER_YEAR\n      ).minus(RAY);\n\n      return {\n        ...userReserve,\n        reserve: {\n          ...reserve,\n          reserveLiquidationBonus: normalize(\n            valueToBigNumber(reserve.reserveLiquidationBonus).minus(\n              pow10(LTV_PRECISION)\n            ),\n            4\n          ),\n        },\n        scaledATokenBalance: normalize(\n          userReserve.scaledATokenBalance,\n          reserveDecimals\n        ),\n        stableBorrowAPR: normalize(userReserve.stableBorrowRate, RAY_DECIMALS),\n        stableBorrowAPY: normalize(exactStableBorrowRate, RAY_DECIMALS),\n        variableBorrowIndex: normalize(\n          userReserve.variableBorrowIndex,\n          RAY_DECIMALS\n        ),\n        underlyingBalance: normalize(\n          userReserve.underlyingBalance,\n          reserveDecimals\n        ),\n        underlyingBalanceETH: normalize(\n          userReserve.underlyingBalanceETH,\n          ETH_DECIMALS\n        ),\n        underlyingBalanceUSD: normalize(\n          userReserve.underlyingBalanceUSD,\n          USD_DECIMALS\n        ),\n        stableBorrows: normalize(userReserve.stableBorrows, reserveDecimals),\n        stableBorrowsETH: normalize(userReserve.stableBorrowsETH, ETH_DECIMALS),\n        stableBorrowsUSD: normalize(userReserve.stableBorrowsUSD, USD_DECIMALS),\n        variableBorrows: normalize(\n          userReserve.variableBorrows,\n          reserveDecimals\n        ),\n        variableBorrowsETH: normalize(\n          userReserve.variableBorrowsETH,\n          ETH_DECIMALS\n        ),\n        variableBorrowsUSD: normalize(\n          userReserve.variableBorrowsUSD,\n          USD_DECIMALS\n        ),\n        totalBorrows: normalize(userReserve.totalBorrows, reserveDecimals),\n        totalBorrowsETH: normalize(userReserve.totalBorrowsETH, ETH_DECIMALS),\n        totalBorrowsUSD: normalize(userReserve.totalBorrowsUSD, USD_DECIMALS),\n      };\n    }\n  );\n  return {\n    id: userData.id,\n    reservesData: userReservesData,\n    totalLiquidityETH: normalize(userData.totalLiquidityETH, ETH_DECIMALS),\n    totalLiquidityUSD: normalize(userData.totalLiquidityUSD, USD_DECIMALS),\n    totalCollateralETH: normalize(userData.totalCollateralETH, ETH_DECIMALS),\n    totalCollateralUSD: normalize(userData.totalCollateralUSD, USD_DECIMALS),\n    totalBorrowsETH: normalize(userData.totalBorrowsETH, ETH_DECIMALS),\n    totalBorrowsUSD: normalize(userData.totalBorrowsUSD, USD_DECIMALS),\n    availableBorrowsETH: normalize(userData.availableBorrowsETH, ETH_DECIMALS),\n    currentLoanToValue: normalize(userData.currentLoanToValue, 4),\n    currentLiquidationThreshold: normalize(\n      userData.currentLiquidationThreshold,\n      4\n    ),\n    healthFactor: userData.healthFactor,\n    totalRewards: userData.totalRewards,\n    totalRewardsETH: userData.totalRewardsETH,\n    totalRewardsUSD: userData.totalRewardsUSD,\n  };\n}\n\n/**\n * Calculates the formatted debt accrued to a given point in time.\n * @param reserve\n * @param currentTimestamp unix timestamp which must be higher than reserve.lastUpdateTimestamp\n */\nexport function calculateReserveDebt(\n  reserve: ReserveData,\n  currentTimestamp: number\n) {\n  const totalVariableDebt = normalize(\n    rayMul(\n      rayMul(reserve.totalScaledVariableDebt, reserve.variableBorrowIndex),\n      calculateCompoundedInterest(\n        reserve.variableBorrowRate,\n        currentTimestamp,\n        reserve.lastUpdateTimestamp\n      )\n    ),\n    reserve.decimals\n  );\n  const totalStableDebt = normalize(\n    rayMul(\n      reserve.totalPrincipalStableDebt,\n      calculateCompoundedInterest(\n        reserve.averageStableRate,\n        currentTimestamp,\n        reserve.stableDebtLastUpdateTimestamp\n      )\n    ),\n    reserve.decimals\n  );\n  return { totalVariableDebt, totalStableDebt };\n}\n\nexport function formatReserves(\n  reserves: ReserveData[],\n  currentTimestamp?: number,\n  reserveIndexes30DaysAgo?: ReserveRatesData[],\n  rewardTokenPriceEth = '0',\n  emissionEndTimestamp?: number\n): ComputedReserveData[] {\n  return reserves.map((reserve) => {\n    const reserve30DaysAgo = reserveIndexes30DaysAgo?.find(\n      (res) => res.id === reserve.id\n    )?.paramsHistory?.[0];\n\n    const availableLiquidity = normalize(\n      reserve.availableLiquidity,\n      reserve.decimals\n    );\n\n    const { totalVariableDebt, totalStableDebt } = calculateReserveDebt(\n      reserve,\n      currentTimestamp || reserve.lastUpdateTimestamp\n    );\n\n    const totalDebt = valueToBigNumber(totalStableDebt).plus(totalVariableDebt);\n\n    const totalLiquidity = totalDebt.plus(availableLiquidity).toString();\n    const utilizationRate =\n      totalLiquidity !== '0'\n        ? totalDebt.dividedBy(totalLiquidity).toString()\n        : '0';\n\n    const hasEmission =\n      emissionEndTimestamp &&\n      emissionEndTimestamp >\n        (currentTimestamp || Math.floor(Date.now() / 1000));\n\n    const aIncentivesAPY =\n      hasEmission && totalLiquidity !== '0'\n        ? calculateIncentivesAPY(\n            reserve.aEmissionPerSecond,\n            rewardTokenPriceEth,\n            totalLiquidity,\n            reserve.price.priceInEth\n          )\n        : '0';\n\n    const vIncentivesAPY =\n      hasEmission && totalVariableDebt !== '0'\n        ? calculateIncentivesAPY(\n            reserve.vEmissionPerSecond,\n            rewardTokenPriceEth,\n            totalVariableDebt,\n            reserve.price.priceInEth\n          )\n        : '0';\n\n    const sIncentivesAPY =\n      hasEmission && totalStableDebt !== '0'\n        ? calculateIncentivesAPY(\n            reserve.sEmissionPerSecond,\n            rewardTokenPriceEth,\n            totalStableDebt,\n            reserve.price.priceInEth\n          )\n        : '0';\n\n    const supplyAPY = rayPow(\n      valueToZDBigNumber(reserve.liquidityRate)\n        .dividedBy(SECONDS_PER_YEAR)\n        .plus(RAY),\n      SECONDS_PER_YEAR\n    ).minus(RAY);\n\n    const variableBorrowAPY = rayPow(\n      valueToZDBigNumber(reserve.variableBorrowRate)\n        .dividedBy(SECONDS_PER_YEAR)\n        .plus(RAY),\n      SECONDS_PER_YEAR\n    ).minus(RAY);\n\n    const stableBorrowAPY = rayPow(\n      valueToZDBigNumber(reserve.stableBorrowRate)\n        .dividedBy(SECONDS_PER_YEAR)\n        .plus(RAY),\n      SECONDS_PER_YEAR\n    ).minus(RAY);\n\n    return {\n      ...reserve,\n      totalVariableDebt,\n      totalStableDebt,\n      totalLiquidity,\n      availableLiquidity,\n      utilizationRate,\n      aIncentivesAPY,\n      vIncentivesAPY,\n      sIncentivesAPY,\n      totalDebt: totalDebt.toString(),\n      price: {\n        ...reserve.price,\n        priceInEth: normalize(reserve.price.priceInEth, ETH_DECIMALS),\n      },\n      baseLTVasCollateral: normalize(\n        reserve.baseLTVasCollateral,\n        LTV_PRECISION\n      ),\n      reserveFactor: normalize(reserve.reserveFactor, LTV_PRECISION),\n      variableBorrowAPR: normalize(reserve.variableBorrowRate, RAY_DECIMALS),\n      variableBorrowAPY: normalize(variableBorrowAPY, RAY_DECIMALS),\n      avg30DaysVariableBorrowRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.variableBorrowIndex,\n            reserve.variableBorrowIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n      avg30DaysLiquidityRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.liquidityIndex,\n            reserve.liquidityIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n\n      stableBorrowAPR: normalize(reserve.stableBorrowRate, RAY_DECIMALS),\n      stableBorrowAPY: normalize(stableBorrowAPY, RAY_DECIMALS),\n      supplyAPR: normalize(reserve.liquidityRate, RAY_DECIMALS),\n      supplyAPY: normalize(supplyAPY, RAY_DECIMALS),\n      liquidityIndex: normalize(reserve.liquidityIndex, RAY_DECIMALS),\n      reserveLiquidationThreshold: normalize(\n        reserve.reserveLiquidationThreshold,\n        4\n      ),\n      reserveLiquidationBonus: normalize(\n        valueToBigNumber(reserve.reserveLiquidationBonus).minus(\n          10 ** LTV_PRECISION\n        ),\n        4\n      ),\n      totalScaledVariableDebt: normalize(\n        reserve.totalScaledVariableDebt,\n        reserve.decimals\n      ),\n      totalPrincipalStableDebt: normalize(\n        reserve.totalPrincipalStableDebt,\n        reserve.decimals\n      ),\n      variableBorrowIndex: normalize(reserve.variableBorrowIndex, RAY_DECIMALS),\n    };\n  });\n}\n\n/**\n * Calculates the debt accrued to a given point in time.\n * @param reserve\n * @param currentTimestamp unix timestamp which must be higher than reserve.lastUpdateTimestamp\n */\nexport function calculateReserveDebtSuppliesRaw(\n  reserve: ReserveSupplyData,\n  currentTimestamp: number\n) {\n  const totalVariableDebt = rayMul(\n    rayMul(reserve.totalScaledVariableDebt, reserve.variableBorrowIndex),\n    calculateCompoundedInterest(\n      reserve.variableBorrowRate,\n      currentTimestamp,\n      reserve.lastUpdateTimestamp\n    )\n  );\n  const totalStableDebt = rayMul(\n    reserve.totalPrincipalStableDebt,\n    calculateCompoundedInterest(\n      reserve.averageStableRate,\n      currentTimestamp,\n      reserve.stableDebtLastUpdateTimestamp\n    )\n  );\n  return { totalVariableDebt, totalStableDebt };\n}\n\nexport function calculateSupplies(\n  reserve: ReserveSupplyData,\n  currentTimestamp: number\n): Supplies {\n  const {\n    totalVariableDebt,\n    totalStableDebt,\n  } = calculateReserveDebtSuppliesRaw(reserve, currentTimestamp);\n\n  const totalDebt = totalVariableDebt.plus(totalStableDebt);\n\n  const totalLiquidity = totalDebt.plus(reserve.availableLiquidity);\n  return {\n    totalVariableDebt,\n    totalStableDebt,\n    totalLiquidity,\n  };\n}\n\nexport function calculateIncentivesAPY(\n  emissionPerSecond: string,\n  rewardTokenPriceInEth: string,\n  tokenTotalSupplyNormalized: string,\n  tokenPriceInEth: string\n): string {\n  const emissionPerSecondNormalized = normalizeBN(\n    emissionPerSecond,\n    ETH_DECIMALS\n  ).multipliedBy(rewardTokenPriceInEth);\n  const emissionPerYear = emissionPerSecondNormalized.multipliedBy(\n    SECONDS_PER_YEAR\n  );\n\n  const totalSupplyNormalized = valueToBigNumber(\n    tokenTotalSupplyNormalized\n  ).multipliedBy(tokenPriceInEth);\n\n  return emissionPerYear.dividedBy(totalSupplyNormalized).toString(10);\n}\n\nexport function calculateRewards(\n  principalUserBalance: string,\n  reserveIndex: string,\n  userIndex: string,\n  precision: number,\n  rewardTokenDecimals: number,\n  reserveIndexTimestamp: number,\n  emissionPerSecond: string,\n  totalSupply: BigNumber,\n  currentTimestamp: number,\n  emissionEndTimestamp: number\n): string {\n  const actualCurrentTimestamp =\n    currentTimestamp > emissionEndTimestamp\n      ? emissionEndTimestamp\n      : currentTimestamp;\n\n  const timeDelta = actualCurrentTimestamp - reserveIndexTimestamp;\n\n  let currentReserveIndex;\n  if (\n    reserveIndexTimestamp == +currentTimestamp ||\n    reserveIndexTimestamp >= emissionEndTimestamp\n  ) {\n    currentReserveIndex = valueToZDBigNumber(reserveIndex);\n  } else {\n    currentReserveIndex = valueToZDBigNumber(emissionPerSecond)\n      .multipliedBy(timeDelta)\n      .multipliedBy(pow10(precision))\n      .dividedBy(totalSupply)\n      .plus(reserveIndex);\n  }\n\n  const reward = valueToZDBigNumber(principalUserBalance)\n    .multipliedBy(currentReserveIndex.minus(userIndex))\n    .dividedBy(pow10(precision));\n\n  return normalize(reward, rewardTokenDecimals);\n}\n","import { providers, BigNumber, BytesLike, PopulatedTransaction } from 'ethers';\n\nexport type tEthereumAddress = string;\nexport type tStringCurrencyUnits = string; // ex 2.5 eth\nexport type tStringDecimalUnits = string; // ex 2500000000000000000\nexport type ENS = string; // something.eth\n\n/** InterestRate options */\nexport enum InterestRate {\n  None = 'None',\n  Stable = 'Stable',\n  Variable = 'Variable',\n}\n\nexport enum Market {\n  Proto = 'proto',\n  AMM = 'amm',\n}\n\nexport enum Network {\n  mainnet = 'mainnet',\n  ropsten = 'ropsten',\n  kovan = 'kovan',\n  polygon = 'polygon',\n  fork = 'fork',\n  mumbai = 'mumbai',\n  polygon_fork = 'polygon_fork',\n  avalanche = 'avalanche',\n  avalanche_fork = 'avalanche_fork',\n  fuji = 'fuji', // avalanche test network\n  arbitrum_one = 'arbitrum_one',\n  arbitrum_rinkeby = 'arbitrum_rinkeby',\n}\n\nexport enum ChainId {\n  mainnet = 1,\n  ropsten = 3,\n  kovan = 42,\n  polygon = 137,\n  fork = 1337,\n  mumbai = 80001,\n  polygon_fork = 1338,\n  avalanche = 43114,\n  avalanche_fork = 1337,\n  fuji = 43113, // avalanche test network\n  arbitrum_one = 42161,\n  arbitrum_rinkeby = 421611,\n}\nexport type ConstantAddressesByNetwork = {\n  [network: string]: {\n    SYNTHETIX_PROXY_ADDRESS?: tEthereumAddress;\n  };\n};\nexport type GovernanceConfig = {\n  AAVE_GOVERNANCE_V2: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_LONG: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_HELPER: tEthereumAddress;\n};\n\nexport type IncentivesConfig = {\n  INCENTIVES_CONTROLLER: tEthereumAddress;\n  INCENTIVES_CONTROLLER_REWARD_TOKEN: tEthereumAddress;\n};\n\nexport type MigratorConfig = {\n  LEND_TO_AAVE_MIGRATOR: tEthereumAddress;\n};\n\nexport type LendingPoolMarketConfig = {\n  LENDING_POOL: tEthereumAddress;\n  WETH_GATEWAY?: tEthereumAddress;\n  FLASH_LIQUIDATION_ADAPTER?: tEthereumAddress;\n  REPAY_WITH_COLLATERAL_ADAPTER?: tEthereumAddress;\n  SWAP_COLLATERAL_ADAPTER?: tEthereumAddress;\n  FAUCET?: tEthereumAddress;\n};\n\nexport type LendingPoolConfig = {\n  [network: string]: {\n    [market: string]: LendingPoolMarketConfig;\n  };\n};\n\nexport type StakingNetworkConfig = {\n  TOKEN_STAKING: tEthereumAddress;\n  STAKING_REWARD_TOKEN: tEthereumAddress;\n  STAKING_HELPER?: tEthereumAddress;\n};\n\nexport type StakingConfig = {\n  [network: string]: { [stake: string]: StakingNetworkConfig };\n};\n\nexport type TxBuilderConfig = {\n  governance?: {\n    [network: string]: GovernanceConfig;\n  };\n  incentives?: {\n    [network: string]: IncentivesConfig;\n  };\n  migrator?: { [network: string]: MigratorConfig };\n  lendingPool?: LendingPoolConfig;\n  staking?: StakingConfig;\n};\n\nexport enum eEthereumTxType {\n  ERC20_APPROVAL = 'ERC20_APPROVAL',\n  DLP_ACTION = 'DLP_ACTION',\n  GOVERNANCE_ACTION = 'GOVERNANCE_ACTION',\n  GOV_DELEGATION_ACTION = 'GOV_DELEGATION_ACTION',\n  STAKE_ACTION = 'STAKE_ACTION',\n  MIGRATION_LEND_AAVE = 'MIGRATION_LEND_AAVE',\n  FAUCET_MINT = 'FAUCET_MINT',\n  REWARD_ACTION = 'REWARD_ACTION',\n}\n\nexport enum ProtocolAction {\n  default = 'default',\n  withdraw = 'withdraw',\n  deposit = 'deposit',\n  liquidationCall = 'liquidationCall',\n  liquidationFlash = 'liquidationFlash',\n  repay = 'repay',\n  swapCollateral = 'swapCollateral',\n  repayCollateral = 'repayCollateral',\n  withdrawETH = 'withdrawETH',\n  borrowETH = 'borrwoETH',\n}\n\nexport enum GovernanceVote {\n  Abstain = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum Stake {\n  aave = 'aave',\n  bpt = 'bpt',\n}\n\nexport type GasRecommendationType = {\n  [action: string]: {\n    limit: string;\n    recommended: string;\n  };\n};\n\nexport type GeneratedTx = {\n  tx: transactionType;\n  gas: {\n    price: string;\n    limit: string;\n  };\n};\n\nexport type transactionType = {\n  value?: string;\n  from?: string;\n  to?: string;\n  nonce?: number;\n  gasLimit?: BigNumber;\n  gasPrice?: BigNumber;\n  data?: string;\n  chainId?: number;\n};\n\nexport type AddressModel = {\n  ADDRESS_PROVIDER_ADDRESS: tEthereumAddress;\n  LENDINGPOOL_ADDRESS: tEthereumAddress;\n  LENDINGPOOL_CORE_ADDRESS: tEthereumAddress;\n  SYNTHETIX_PROXY_ADDRESS: tEthereumAddress;\n  GOVERNANCE_PROTO_CONTRACT: tEthereumAddress;\n  LEND_TO_AAVE_MIGRATOR: tEthereumAddress;\n  WETH_GATEWAY: tEthereumAddress;\n  FAUCET: tEthereumAddress;\n  SWAP_COLLATERAL_ADAPTER: tEthereumAddress;\n  REPAY_WITH_COLLATERAL_ADAPTER: tEthereumAddress;\n  AAVE_GOVERNANCE_V2: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_LONG: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_HELPER: tEthereumAddress;\n  FLASHLIQUIDATION: tEthereumAddress;\n  INCENTIVES_CONTROLLER: tEthereumAddress;\n  INCENTIVES_CONTROLLER_REWARD_TOKEN: tEthereumAddress;\n};\n\nexport type tCommonContractAddressBetweenMarkets = Pick<\n  AddressModel,\n  | 'SYNTHETIX_PROXY_ADDRESS'\n  | 'GOVERNANCE_PROTO_CONTRACT'\n  | 'LEND_TO_AAVE_MIGRATOR'\n  | 'WETH_GATEWAY'\n  | 'FAUCET'\n  | 'SWAP_COLLATERAL_ADAPTER'\n  | 'REPAY_WITH_COLLATERAL_ADAPTER'\n  | 'FLASHLIQUIDATION'\n  | 'INCENTIVES_CONTROLLER'\n  | 'INCENTIVES_CONTROLLER_REWARD_TOKEN'\n>;\n\nexport type tDistinctContractAddressBetweenMarkets = Pick<\n  AddressModel,\n  | 'ADDRESS_PROVIDER_ADDRESS'\n  | 'LENDINGPOOL_ADDRESS'\n  | 'LENDINGPOOL_CORE_ADDRESS'\n>;\n\nexport type tDistinctContractAddressBetweenMarketsV2 = Pick<\n  AddressModel,\n  'LENDINGPOOL_ADDRESS'\n>;\n\nexport type tDistinctGovernanceV2Addresses = Pick<\n  AddressModel,\n  | 'AAVE_GOVERNANCE_V2'\n  | 'AAVE_GOVERNANCE_V2_EXECUTOR_SHORT'\n  | 'AAVE_GOVERNANCE_V2_EXECUTOR_LONG'\n  | 'AAVE_GOVERNANCE_V2_HELPER'\n>;\n\nexport type tdistinctStakingAddressesBetweenTokens = {\n  TOKEN_STAKING_ADDRESS: tEthereumAddress;\n  STAKING_REWARD_TOKEN_ADDRESS: tEthereumAddress;\n  STAKING_HELPER_ADDRESS: tEthereumAddress;\n  canUsePermit: boolean;\n};\n\nexport type ContractAddresses = {\n  [contractName: string]: tEthereumAddress;\n};\n\nexport type Configuration = {\n  network: Network;\n  provider: providers.Provider;\n};\n\nexport type EthereumTransactionTypeExtended = {\n  txType: eEthereumTxType;\n  tx: () => Promise<transactionType>;\n  gas: GasResponse;\n};\n\nexport type TransactionGenerationMethod = {\n  rawTxMethod: () => Promise<PopulatedTransaction>;\n  from: tEthereumAddress;\n  value?: string;\n  gasSurplus?: number;\n  action?: ProtocolAction;\n};\n\nexport type TransactionGasGenerationMethod = {\n  txCallback: () => Promise<transactionType>;\n  action?: ProtocolAction;\n};\n\nexport type GasType = {\n  gasLimit: string | undefined;\n  gasPrice: string;\n};\nexport type GasResponse = (force?: boolean) => Promise<GasType | null>;\n\nexport type TokenMetadataType = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n};\n\nexport type DefaultProviderKeys = {\n  etherscan?: string;\n  infura?: string;\n  alchemy?: string;\n};\n\nexport type GovernanceConfigType = {\n  [network: string]: tDistinctGovernanceV2Addresses;\n};\nexport type StakingConfigType = {\n  [sToken: string]: {\n    [network: string]: tdistinctStakingAddressesBetweenTokens;\n  };\n};\n\nexport type CommonConfigType = {\n  [network: string]: tCommonContractAddressBetweenMarkets;\n};\n\nexport type LendingPoolConfigType = {\n  [pool: string]: {\n    [network: string]: tDistinctContractAddressBetweenMarketsV2;\n  };\n};\n\nexport type EnabledNetworksType = {\n  staking: {\n    [sToken: string]: Network[];\n  };\n  lendingPool: {\n    [market: string]: Network[];\n  };\n  governance: Network[];\n  wethGateway: Network[];\n  faucet: Network[];\n  liquiditySwapAdapter: Network[];\n  repayWithCollateralAdapter: Network[];\n  aaveGovernanceV2: Network[];\n  ltaMigrator: Network[];\n  incentivesController: Network[];\n};\n\nexport type PermitSignature = {\n  amount: tStringCurrencyUnits;\n  deadline: string;\n  v: number;\n  r: BytesLike;\n  s: BytesLike;\n};\n\nexport type FlashLoanParams = {\n  assetToSwapToList: tEthereumAddress[]; // List of the addresses of the reserve to be swapped to and deposited\n  minAmountsToReceive: string[]; // List of min amounts to be received from the swap\n  swapAllBalance: boolean[]; // Flag indicating if all the user balance should be swapped\n  permitAmount: string[]; // List of amounts for the permit signature\n  deadline: string[]; // List of deadlines for the permit signature\n  v: number[]; // List of v param for the permit signature\n  r: BytesLike[]; // List of r param for the permit signature\n  s: BytesLike[]; // List of s param for the permit signature\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { BigNumber, constants } from 'ethers';\nimport {\n  ConstantAddressesByNetwork,\n  GasRecommendationType,\n  Network,\n  ProtocolAction,\n} from '../types';\n\nexport const DEFAULT_NULL_VALUE_ON_TX = BigNumber.from(0).toHexString();\nexport const DEFAULT_APPROVE_AMOUNT = constants.MaxUint256.toString();\nexport const MAX_UINT_AMOUNT =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639935';\nexport const SUPER_BIG_ALLOWANCE_NUMBER =\n  '11579208923731619542357098500868790785326998466564056403945758400791';\nexport const API_ETH_MOCK_ADDRESS =\n  '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\nexport const uniswapEthAmount = '0.1';\nexport const SURPLUS = '0.05';\n\nexport const gasLimitRecommendations: GasRecommendationType = {\n  [ProtocolAction.default]: {\n    limit: '210000',\n    recommended: '210000',\n  },\n  [ProtocolAction.deposit]: {\n    limit: '300000',\n    recommended: '300000',\n  },\n  [ProtocolAction.withdraw]: {\n    limit: '230000',\n    recommended: '300000',\n  },\n  [ProtocolAction.liquidationCall]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n  [ProtocolAction.liquidationFlash]: {\n    limit: '995000',\n    recommended: '995000',\n  },\n  [ProtocolAction.repay]: {\n    limit: '300000',\n    recommended: '300000',\n  },\n  [ProtocolAction.borrowETH]: {\n    limit: '450000',\n    recommended: '450000',\n  },\n  [ProtocolAction.withdrawETH]: {\n    limit: '640000',\n    recommended: '640000',\n  },\n  [ProtocolAction.swapCollateral]: {\n    limit: '1000000',\n    recommended: '1000000',\n  },\n  [ProtocolAction.repayCollateral]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n};\n\nexport const cosntantAddressesByNetwork: ConstantAddressesByNetwork = {\n  [Network.mainnet]: {\n    SYNTHETIX_PROXY_ADDRESS: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',\n  },\n};\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveGovernanceV2 } from \"../IAaveGovernanceV2\";\n\nexport class IAaveGovernanceV2__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveGovernanceV2 {\n    return new Contract(address, _abi, signerOrProvider) as IAaveGovernanceV2;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"ExecutorAuthorized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"ExecutorUnauthorized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newStrategy\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorChange\",\n        type: \"address\",\n      },\n    ],\n    name: \"GovernanceStrategyChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ProposalCanceled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"creator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IExecutorWithTimelock\",\n        name: \"executor\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address[]\",\n        name: \"targets\",\n        type: \"address[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"values\",\n        type: \"uint256[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"string[]\",\n        name: \"signatures\",\n        type: \"string[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes[]\",\n        name: \"calldatas\",\n        type: \"bytes[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool[]\",\n        name: \"withDelegatecalls\",\n        type: \"bool[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startBlock\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endBlock\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"strategy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"ipfsHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"ProposalCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorExecution\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProposalExecuted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"executionTime\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorQueueing\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProposalQueued\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"voter\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"votingPower\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"VoteEmitted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newVotingDelay\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorChange\",\n        type: \"address\",\n      },\n    ],\n    name: \"VotingDelayChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"__abdicate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"executors\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"authorizeExecutors\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"cancel\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IExecutorWithTimelock\",\n        name: \"executor\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"targets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"values\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"string[]\",\n        name: \"signatures\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"calldatas\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"bool[]\",\n        name: \"withDelegatecalls\",\n        type: \"bool[]\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"ipfsHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGovernanceStrategy\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGuardian\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProposalById\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IAaveGovernanceV2.ProposalWithoutVotes\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProposalState\",\n    outputs: [\n      {\n        internalType: \"enum IAaveGovernanceV2.ProposalState\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProposalsCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"voter\",\n        type: \"address\",\n      },\n    ],\n    name: \"getVoteOnProposal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"support\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint248\",\n            name: \"votingPower\",\n            type: \"uint248\",\n          },\n        ],\n        internalType: \"struct IAaveGovernanceV2.Vote\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVotingDelay\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExecutorAuthorized\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"queue\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"governanceStrategy\",\n        type: \"address\",\n      },\n    ],\n    name: \"setGovernanceStrategy\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"votingDelay\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setVotingDelay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n    ],\n    name: \"submitVote\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"submitVoteBySignature\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"executors\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"unauthorizeExecutors\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveIncentivesController } from \"../IAaveIncentivesController\";\n\nexport class IAaveIncentivesController__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveIncentivesController {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IAaveIncentivesController;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimRewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveStakingHelper } from \"../IAaveStakingHelper\";\n\nexport class IAaveStakingHelper__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveStakingHelper {\n    return new Contract(address, _abi, signerOrProvider) as IAaveStakingHelper;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IDebtTokenBase } from \"../IDebtTokenBase\";\n\nexport class IDebtTokenBase__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IDebtTokenBase {\n    return new Contract(address, _abi, signerOrProvider) as IDebtTokenBase;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveDelegation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"fromUser\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"toUser\",\n        type: \"address\",\n      },\n    ],\n    name: \"borrowAllowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IERC20Detailed } from \"../IERC20Detailed\";\n\nexport class IERC20Detailed__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IERC20Detailed {\n    return new Contract(address, _abi, signerOrProvider) as IERC20Detailed;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IFaucet } from \"../IFaucet\";\n\nexport class IFaucet__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IFaucet {\n    return new Contract(address, _abi, signerOrProvider) as IFaucet;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMinter\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernancePowerDelegationToken } from \"../IGovernancePowerDelegationToken\";\n\nexport class IGovernancePowerDelegationToken__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernancePowerDelegationToken {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IGovernancePowerDelegationToken;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"delegator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"DelegateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"DelegatedPowerChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"_nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n    ],\n    name: \"delegate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"delegateBySig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"delegateByType\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"delegateByTypeBySig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getDelegateeByType\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPowerAtBlock\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPowerCurrent\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"totalSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernanceStrategy } from \"../IGovernanceStrategy\";\n\nexport class IGovernanceStrategy__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernanceStrategy {\n    return new Contract(address, _abi, signerOrProvider) as IGovernanceStrategy;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"AAVE\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"STK_AAVE\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPropositionPowerAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalPropositionSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalVotingSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getVotingPowerAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernanceV2Helper } from \"../IGovernanceV2Helper\";\n\nexport class IGovernanceV2Helper__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernanceV2Helper {\n    return new Contract(address, _abi, signerOrProvider) as IGovernanceV2Helper;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IAaveGovernanceV2\",\n        name: \"governance\",\n        type: \"address\",\n      },\n    ],\n    name: \"getProposal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"totalVotingSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumQuorum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumDiff\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTimeWithGracePeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalCreated\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IAaveGovernanceV2.ProposalState\",\n            name: \"proposalState\",\n            type: \"uint8\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.ProposalStats\",\n        name: \"proposalStats\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"skip\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IAaveGovernanceV2\",\n        name: \"governance\",\n        type: \"address\",\n      },\n    ],\n    name: \"getProposals\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"totalVotingSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumQuorum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumDiff\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTimeWithGracePeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalCreated\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IAaveGovernanceV2.ProposalState\",\n            name: \"proposalState\",\n            type: \"uint8\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.ProposalStats[]\",\n        name: \"proposalsStats\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getTokensPower\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"votingPower\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"delegatedAddressVotingPower\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"propositionPower\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"delegatedAddressPropositionPower\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.Power[]\",\n        name: \"power\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ILendingPool } from \"../ILendingPool\";\n\nexport class ILendingPool__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ILendingPool {\n    return new Contract(address, _abi, signerOrProvider) as ILendingPool;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"FLASHLOAN_PREMIUM_TOTAL\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interestRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"borrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"modes\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"flashLoan\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"collateral\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"purchaseAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"receiveAToken\",\n        type: \"bool\",\n      },\n    ],\n    name: \"liquidationCall\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"useAsCollateral\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapBorrowRateMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ILendToAaveMigrator } from \"../ILendToAaveMigrator\";\n\nexport class ILendToAaveMigrator__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ILendToAaveMigrator {\n    return new Contract(address, _abi, signerOrProvider) as ILendToAaveMigrator;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"LEND\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"migrateFromLEND\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IMinter } from \"../IMinter\";\n\nexport class IMinter__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IMinter {\n    return new Contract(address, _abi, signerOrProvider) as IMinter;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"isEthRequired\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IRepayWithCollateral } from \"../IRepayWithCollateral\";\n\nexport class IRepayWithCollateral__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IRepayWithCollateral {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IRepayWithCollateral;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"collateralAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"debtAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"collateralAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"debtRepayAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"debtRateMode\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IRepayWithCollateral.PermitSignature\",\n        name: \"permitSignature\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"useEthPath\",\n        type: \"bool\",\n      },\n    ],\n    name: \"swapAndRepay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IStakedToken } from \"../IStakedToken\";\n\nexport class IStakedToken__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IStakedToken {\n    return new Contract(address, _abi, signerOrProvider) as IStakedToken;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"REWARD_TOKEN\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"STAKED_TOKEN\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"claimRewards\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cooldown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IParaSwapLiquiditySwapAdapter } from \"../IParaSwapLiquiditySwapAdapter\";\n\nexport class IParaSwapLiquiditySwapAdapter__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IParaSwapLiquiditySwapAdapter {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IParaSwapLiquiditySwapAdapter;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"assetToSwapFrom\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"assetToSwapTo\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountToSwap\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minAmountToReceive\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapAllBalanceOffset\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"swapCalldata\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"address\",\n        name: \"augustus\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IParaSwapLiquiditySwapAdapter.PermitSignature\",\n        name: \"permitParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapAndDeposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ISynthetix } from \"../ISynthetix\";\n\nexport class ISynthetix__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ISynthetix {\n    return new Contract(address, _abi, signerOrProvider) as ISynthetix;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferableSynthetix\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"transferable\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IWETHGateway } from \"../IWETHGateway\";\n\nexport class IWETHGateway__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IWETHGateway {\n    return new Contract(address, _abi, signerOrProvider) as IWETHGateway;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interesRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"borrowETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repayETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","import BigNumber from 'bignumber.js';\nimport {\n  API_ETH_MOCK_ADDRESS,\n  DEFAULT_NULL_VALUE_ON_TX,\n  uniswapEthAmount,\n} from '../config';\nimport { tStringDecimalUnits } from '../types';\n\nexport const parseNumber = (value: string, decimals: number): string => {\n  return new BigNumber(value)\n    .multipliedBy(new BigNumber(10).pow(decimals))\n    .toFixed(0);\n};\n\nexport const decimalsToCurrencyUnits = (\n  value: string,\n  decimals: number\n): string =>\n  new BigNumber(value).div(new BigNumber(10).pow(decimals)).toFixed();\n\nexport const getTxValue = (reserve: string, amount: string): string => {\n  return reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()\n    ? amount\n    : DEFAULT_NULL_VALUE_ON_TX;\n};\n\nexport const mintAmountsPerToken: { [token: string]: tStringDecimalUnits } = {\n  AAVE: parseNumber('100', 18),\n  BAT: parseNumber('100000', 18),\n  BUSD: parseNumber('10000', 18),\n  DAI: parseNumber('10000', 18),\n  ENJ: parseNumber('100000', 18),\n  KNC: parseNumber('10000', 18),\n  LEND: parseNumber('1000', 18), // Not available on v2, but to support v1 faucet\n  LINK: parseNumber('1000', 18),\n  MANA: parseNumber('100000', 18),\n  MKR: parseNumber('10', 18),\n  WETH: parseNumber('10', 18),\n  REN: parseNumber('10000', 18),\n  REP: parseNumber('1000', 18),\n  SNX: parseNumber('100', 18),\n  SUSD: parseNumber('10000', 18),\n  TUSD: '0', // The TusdMinter contract already mints the maximum\n  UNI: parseNumber('1000', 18),\n  USDC: parseNumber('10000', 6),\n  USDT: parseNumber('10000', 6),\n  WBTC: parseNumber('1', 8),\n  YFI: parseNumber('1', 18),\n  ZRX: parseNumber('100000', 18),\n  UNIUSDC: parseNumber(uniswapEthAmount, 6),\n  UNIDAI: parseNumber(uniswapEthAmount, 18),\n  UNIUSDT: parseNumber(uniswapEthAmount, 6),\n  UNIDAIETH: parseNumber(uniswapEthAmount, 18),\n  UNIUSDCETH: parseNumber(uniswapEthAmount, 18),\n  UNISETHETH: parseNumber(uniswapEthAmount, 18),\n  UNILENDETH: parseNumber(uniswapEthAmount, 18),\n  UNILINKETH: parseNumber(uniswapEthAmount, 18),\n  UNIMKRETH: parseNumber(uniswapEthAmount, 18),\n};\n\nexport const canBeEnsAddress = (ensAddress: string): boolean => {\n  return ensAddress.toLowerCase().endsWith('.eth');\n};\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport 'reflect-metadata';\n\nexport const isEthAddressMetadataKey = Symbol('ethAddress');\nexport const isEthAddressArrayMetadataKey = Symbol('ethAddressArray');\nexport const isEthAddressOrENSMetadataKey = Symbol('ethOrENSAddress');\nexport const isPositiveMetadataKey = Symbol('isPositive');\nexport const isPositiveOrMinusOneMetadataKey = Symbol('isPositiveOrMinusOne');\nexport const is0OrPositiveMetadataKey = Symbol('is0OrPositiveMetadataKey');\nexport const optionalMetadataKey = Symbol('Optional');\n\nexport type paramsType = {\n  index: number;\n  field: string | undefined;\n};\n\n// tslint:disable-next-line: function-name\nexport function IsEthAddress(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(isEthAddressMetadataKey, target, propertyKey) ||\n      [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\n// tslint:disable-next-line: function-name\nexport function IsEthAddressArray(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(isEthAddressMetadataKey, target, propertyKey) ||\n      [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressArrayMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsEthAddressOrENS(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(\n        isEthAddressOrENSMetadataKey,\n        target,\n        propertyKey\n      ) || [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressOrENSMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsPositiveAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(isPositiveMetadataKey, target, propertyKey) || [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(isPositiveMetadataKey, params, target, propertyKey);\n  };\n}\n\nexport function Is0OrPositiveAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(is0OrPositiveMetadataKey, target, propertyKey) ||\n      [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(\n      is0OrPositiveMetadataKey,\n      params,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsPositiveOrMinusOneAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(\n        isPositiveOrMinusOneMetadataKey,\n        target,\n        propertyKey\n      ) || [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(\n      isPositiveOrMinusOneMetadataKey,\n      params,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function Optional(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyKey: string | symbol,\n  parameterIndex: number\n): void {\n  const existingOptionalParameters =\n    Reflect.getOwnMetadata(optionalMetadataKey, target, propertyKey) || [];\n  existingOptionalParameters.push(parameterIndex);\n  Reflect.defineMetadata(\n    optionalMetadataKey,\n    existingOptionalParameters,\n    target,\n    propertyKey\n  );\n}\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { utils } from 'ethers';\nimport { canBeEnsAddress } from '../utils/parsings';\n// import 'reflect-metadata';\nimport {\n  is0OrPositiveMetadataKey,\n  isEthAddressArrayMetadataKey,\n  isEthAddressMetadataKey,\n  isEthAddressOrENSMetadataKey,\n  isPositiveMetadataKey,\n  isPositiveOrMinusOneMetadataKey,\n  optionalMetadataKey,\n  paramsType,\n} from './paramValidators';\n\nexport function optionalValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any\n): boolean[] {\n  const optionalParameters = Reflect.getOwnMetadata(\n    optionalMetadataKey,\n    target,\n    propertyName\n  );\n\n  const isParamOptional: boolean[] = [];\n  if (optionalParameters) {\n    optionalParameters.forEach((parameterIndex: number) => {\n      if (methodArguments[parameterIndex] == null) {\n        isParamOptional[parameterIndex] = true;\n      }\n    });\n  }\n  return isParamOptional;\n}\n\nexport function isEthAddressValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          throw new Error(\n            `Address: ${\n              methodArguments[0][storedParams.field]\n            } is not a valid ethereum Address`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional &&\n          !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          throw new Error(\n            `Address: ${\n              methodArguments[storedParams.index]\n            } is not a valid ethereum Address`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function isEthAddressArrayValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressArrayMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field]\n          // !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          if (methodArguments[0][storedParams.field].length > 0) {\n            const fieldArray = methodArguments[0][storedParams.field].split(\n              ','\n            );\n            fieldArray.forEach((address: string) => {\n              if (!utils.isAddress(address)) {\n                throw new Error(\n                  `Address: ${address} is not a valid ethereum Address`\n                );\n              }\n            });\n          }\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional\n          // !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          if (methodArguments[storedParams.index].length > 0) {\n            const fieldArray = methodArguments[storedParams.index].split(',');\n            fieldArray.forEach((address: string) => {\n              if (!utils.isAddress(address)) {\n                throw new Error(\n                  `Address: ${address} is not a valid ethereum Address`\n                );\n              }\n            });\n          }\n        }\n      }\n    });\n  }\n}\n\nexport function isEthAddressOrEnsValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressOrENSMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          if (!canBeEnsAddress(methodArguments[0][storedParams.field])) {\n            throw new Error(\n              `Address ${\n                methodArguments[0][storedParams.field]\n              } is not valid ENS format or a valid ethereum Address`\n            );\n          }\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional &&\n          !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          if (!canBeEnsAddress(methodArguments[storedParams.index])) {\n            throw new Error(\n              `Address ${\n                methodArguments[storedParams.index]\n              } is not valid ENS format or a valid ethereum Address`\n            );\n          }\n        }\n      }\n    });\n  }\n}\n\nexport function amountGtThan0Validator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountParameters: paramsType[] = Reflect.getOwnMetadata(\n    isPositiveMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountParameters) {\n    amountParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(Number(methodArguments[0][storedParams.field]) > 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (!isOptional && !(Number(methodArguments[storedParams.index]) > 0)) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function amount0OrPositiveValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountParameters: paramsType[] = Reflect.getOwnMetadata(\n    is0OrPositiveMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountParameters) {\n    amountParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(Number(methodArguments[0][storedParams.field]) >= 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          !isOptional &&\n          !(Number(methodArguments[storedParams.index]) >= 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function amountGtThan0OrMinus1(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountMinusOneParameters: paramsType[] = Reflect.getOwnMetadata(\n    isPositiveOrMinusOneMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountMinusOneParameters) {\n    amountMinusOneParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(\n            Number(methodArguments[0][storedParams.field]) > 0 ||\n            methodArguments[0][storedParams.field] === '-1'\n          )\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0 or -1`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          !isOptional &&\n          !(\n            Number(methodArguments[storedParams.index]) > 0 ||\n            methodArguments[storedParams.index] === '-1'\n          )\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0 or -1`\n          );\n        }\n      }\n    });\n  }\n}\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  amount0OrPositiveValidator,\n  amountGtThan0OrMinus1,\n  amountGtThan0Validator,\n  isEthAddressOrEnsValidator,\n  isEthAddressValidator,\n  optionalValidator,\n} from './validations';\nimport { utils } from 'ethers';\n\nexport function LPFlashLiquidationValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const { LENDING_POOL, FLASH_LIQUIDATION_ADAPTER } =\n      this.lendingPoolConfig || {};\n\n    if (\n      !utils.isAddress(LENDING_POOL) ||\n      !FLASH_LIQUIDATION_ADAPTER ||\n      !utils.isAddress(FLASH_LIQUIDATION_ADAPTER)\n    ) {\n      console.error(\n        `[LPFlahsLiquidationValidator] You need to pass valid addresses`\n      );\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LPRepayWithCollateralValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const { LENDING_POOL, REPAY_WITH_COLLATERAL_ADAPTER } =\n      this.lendingPoolConfig || {};\n\n    if (\n      !utils.isAddress(LENDING_POOL) ||\n      !REPAY_WITH_COLLATERAL_ADAPTER ||\n      !utils.isAddress(REPAY_WITH_COLLATERAL_ADAPTER)\n    ) {\n      console.error(\n        `[LPRepayWithCollateralValidator] You need to pass valid addresses`\n      );\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LPSwapCollateralValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const { LENDING_POOL, SWAP_COLLATERAL_ADAPTER } =\n      this.lendingPoolConfig || {};\n\n    if (\n      !utils.isAddress(LENDING_POOL) ||\n      !SWAP_COLLATERAL_ADAPTER ||\n      !utils.isAddress(SWAP_COLLATERAL_ADAPTER)\n    ) {\n      console.error(\n        `[LPSwapCollateralValidator] You need to pass valid addresses`\n      );\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LPValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const { LENDING_POOL } = this.lendingPoolConfig || {};\n\n    if (!utils.isAddress(LENDING_POOL)) {\n      console.error(`[LendingPoolValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LTAMigratorValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const LEND_TO_AAVE_MIGRATOR =\n      this.migratorConfig?.LEND_TO_AAVE_MIGRATOR || '';\n\n    if (!utils.isAddress(LEND_TO_AAVE_MIGRATOR)) {\n      console.error(`[MigratorValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function IncentivesValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const { INCENTIVES_CONTROLLER, INCENTIVES_CONTROLLER_REWARD_TOKEN } =\n      this.incentivesConfig || {};\n\n    if (\n      !utils.isAddress(INCENTIVES_CONTROLLER_REWARD_TOKEN) ||\n      !utils.isAddress(INCENTIVES_CONTROLLER)\n    ) {\n      console.error(`[IncentivesValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    // isEthAddressArrayValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LiquiditySwapValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const SWAP_COLLATERAL_ADAPTER =\n      this.swapCollateralConfig.SWAP_COLLATERAL_ADAPTER || '';\n\n    if (!utils.isAddress(SWAP_COLLATERAL_ADAPTER)) {\n      console.error(\n        `[LiquiditySwapValidator] You need to pass valid addresses`\n      );\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function RepayWithCollateralValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const REPAY_WITH_COLLATERAL_ADAPTER =\n      this.repayWithCollateralConfig?.REPAY_WITH_COLLATERAL_ADAPTER || '';\n\n    if (!utils.isAddress(REPAY_WITH_COLLATERAL_ADAPTER)) {\n      console.error(\n        `[RepayWithCollateralValidator] You need to pass valid addresses`\n      );\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function StakingValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    // No need to check if addresses exist for network\n    // because this is checked at initialization and type checking of config\n\n    const { TOKEN_STAKING, STAKING_REWARD_TOKEN } = this.stakingConfig || {};\n\n    // Check if addresses are valid.\n    if (\n      !utils.isAddress(TOKEN_STAKING) ||\n      !utils.isAddress(STAKING_REWARD_TOKEN)\n    ) {\n      console.error(`[StakingValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function SignStakingValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    // No need to check if addresses exist for network\n    // because this is checked at initialization and type checking of config\n\n    const { TOKEN_STAKING, STAKING_REWARD_TOKEN, STAKING_HELPER } =\n      this.stakingConfig || {};\n\n    // Check if addresses are valid.\n    if (\n      !utils.isAddress(TOKEN_STAKING) ||\n      !utils.isAddress(STAKING_REWARD_TOKEN) ||\n      !STAKING_HELPER ||\n      !utils.isAddress(TOKEN_STAKING)\n    ) {\n      console.error(`[StakingValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function FaucetValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const FAUCET = this.faucetConfig?.FAUCET;\n\n    if (!FAUCET || (FAUCET && !utils.isAddress(FAUCET))) {\n      console.error(`[FaucetValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function WETHValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const WETH_GATEWAY = this.wethGatewayConfig?.WETH_GATEWAY || '';\n\n    if (!utils.isAddress(WETH_GATEWAY)) {\n      console.error(`[WethGatewayValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function GovValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const {\n      AAVE_GOVERNANCE_V2,\n      AAVE_GOVERNANCE_V2_HELPER,\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT,\n      AAVE_GOVERNANCE_V2_EXECUTOR_LONG,\n    } = this.governanceConfig || {};\n\n    if (\n      !utils.isAddress(AAVE_GOVERNANCE_V2) ||\n      !utils.isAddress(AAVE_GOVERNANCE_V2_HELPER) ||\n      !utils.isAddress(AAVE_GOVERNANCE_V2_EXECUTOR_SHORT) ||\n      !utils.isAddress(AAVE_GOVERNANCE_V2_EXECUTOR_LONG)\n    ) {\n      console.error(`[GovernanceValidator] You need to pass valid addresses`);\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amount0OrPositiveValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function GovDelegationValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    isEthAddressValidator(target, propertyName, arguments);\n    isEthAddressOrEnsValidator(target, propertyName, arguments);\n    amountGtThan0Validator(target, propertyName, arguments);\n    amount0OrPositiveValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n","import { BigNumber } from 'ethers';\nimport { transactionType, Configuration, Network } from '../types';\n\nconst DEFAULT_SURPLUS = 30; // 30%\n// polygon gas estimation is very off for some reason\nconst POLYGON_SURPLUS = 60; // 60%\n\nexport const estimateGas = async (\n  tx: transactionType,\n  config: Configuration,\n  gasSurplus?: number\n): Promise<BigNumber> => {\n  const estimatedGas = await config.provider.estimateGas(tx);\n  return estimatedGas.add(\n    estimatedGas.mul(gasSurplus || DEFAULT_SURPLUS).div(100)\n  );\n};\n\nexport const estimateGasByNetwork = async (\n  tx: transactionType,\n  config: Configuration,\n  gasSurplus?: number\n): Promise<BigNumber> => {\n  const estimatedGas = await config.provider.estimateGas(tx);\n\n  const { network } = config;\n  if (network === Network.polygon) {\n    return estimatedGas.add(estimatedGas.mul(POLYGON_SURPLUS).div(100));\n  }\n\n  return estimatedGas.add(\n    estimatedGas.mul(gasSurplus || DEFAULT_SURPLUS).div(100)\n  );\n};\n\nexport const getGasPrice = async (\n  config: Configuration\n): Promise<BigNumber> => {\n  const gasPrice = await config.provider.getGasPrice();\n  return gasPrice;\n};\n","import { BigNumber, Contract, PopulatedTransaction } from 'ethers';\nimport {\n  Configuration,\n  tEthereumAddress,\n  TransactionGenerationMethod,\n  transactionType,\n  GasResponse,\n  ProtocolAction,\n  EthereumTransactionTypeExtended,\n  eEthereumTxType,\n} from '../types';\nimport { ContractsFactory } from '../interfaces/ContractsFactory';\nimport { estimateGasByNetwork, getGasPrice } from '../utils/gasStation';\nimport { DEFAULT_NULL_VALUE_ON_TX, gasLimitRecommendations } from '../config';\n\nexport default class BaseService<T extends Contract> {\n  readonly contractInstances: { [address: string]: T };\n\n  readonly contractFactory: ContractsFactory;\n\n  readonly config: Configuration;\n\n  constructor(config: Configuration, contractFactory: ContractsFactory) {\n    this.config = config;\n    this.contractFactory = contractFactory;\n    this.contractInstances = {};\n  }\n\n  public getContractInstance = (address: tEthereumAddress): T => {\n    if (!this.contractInstances[address]) {\n      const { provider }: Configuration = this.config;\n      this.contractInstances[address] = this.contractFactory.connect(\n        address,\n        provider\n      ) as T;\n    }\n\n    return this.contractInstances[address];\n  };\n\n  readonly generateTxCallback = ({\n    rawTxMethod,\n    from,\n    value,\n    gasSurplus,\n    action,\n  }: TransactionGenerationMethod): (() => Promise<transactionType>) => async () => {\n    const txRaw: PopulatedTransaction = await rawTxMethod();\n\n    const tx: transactionType = {\n      ...txRaw,\n      from,\n      value: value || DEFAULT_NULL_VALUE_ON_TX,\n    };\n\n    tx.gasLimit = await estimateGasByNetwork(tx, this.config, gasSurplus);\n\n    if (\n      action &&\n      gasLimitRecommendations[action] &&\n      tx.gasLimit.lte(BigNumber.from(gasLimitRecommendations[action].limit))\n    ) {\n      tx.gasLimit = BigNumber.from(gasLimitRecommendations[action].recommended);\n    }\n\n    return tx;\n  };\n\n  readonly generateTxPriceEstimation = (\n    txs: EthereumTransactionTypeExtended[],\n    txCallback: () => Promise<transactionType>,\n    action: string = ProtocolAction.default\n  ): GasResponse => async (force = false) => {\n    try {\n      const gasPrice = await getGasPrice(this.config);\n      const hasPendingApprovals = txs.find(\n        (tx) => tx.txType === eEthereumTxType.ERC20_APPROVAL\n      );\n      if (!hasPendingApprovals || force) {\n        const {\n          gasLimit,\n          gasPrice: gasPriceProv,\n        }: transactionType = await txCallback();\n        if (!gasLimit) {\n          // If we don't recieve the correct gas we throw a error\n          throw new Error('Transaction calculation error');\n        }\n\n        return {\n          gasLimit: gasLimit.toString(),\n          gasPrice: gasPriceProv\n            ? gasPriceProv.toString()\n            : gasPrice.toString(),\n        };\n      }\n      return {\n        gasLimit: gasLimitRecommendations[action].recommended,\n        gasPrice: gasPrice.toString(),\n      };\n    } catch (error) {\n      console.error(\n        'Calculate error on calculate estimation gas price.',\n        error\n      );\n      return null;\n    }\n  };\n}\n","import {\n  IParaSwapLiquiditySwapAdapter__factory,\n  IParaSwapLiquiditySwapAdapter,\n} from '../contract-types';\nimport LiquiditySwapAdapterInterface from '../interfaces/LiquiditySwapAdapterParaswap';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  LendingPoolMarketConfig,\n  ProtocolAction,\n  transactionType,\n} from '../types';\nimport { SwapAndDepositMethodType } from '../types/LiquiditySwapAdapterParaswapMethodTypes';\nimport { LiquiditySwapValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport function augustusFromAmountOffsetFromCalldata(calldata: string) {\n  switch (calldata.slice(0, 10)) {\n    case '0xda8567c8': // Augustus V3 multiSwap\n      return 100; // 4 + 3 * 32\n    case '0x58b9d179': // Augustus V4 swapOnUniswap\n      return 4; // 4 + 0 * 32\n    case '0x0863b7ac': // Augustus V4 swapOnUniswapFork\n      return 68; // 4 + 2 * 32\n    case '0x8f00eccb': // Augustus V4 multiSwap\n      return 68; // 4 + 2 * 32\n    case '0xec1d21dd': // Augustus V4 megaSwap\n      return 68; // 4 + 2 * 32\n    case '0x54840d1a': // Augustus V5 swapOnUniswap\n      return 4; // 4 + 0 * 32\n    case '0xf5661034': // Augustus V5 swapOnUniswapFork\n      return 68; // 4 + 2 * 32\n    case '0x64466805': // Augustus V5 swapOnZeroXv4\n      return 68; // 4 + 2 * 32\n    case '0xa94e78ef': // Augustus V5 multiSwap\n      return 68; // 4 + 2 * 32\n    case '0x46c67b6d': // Augustus V5 megaSwap\n      return 68; // 4 + 2 * 32\n    default:\n      throw new Error('Unrecognized function selector for Augustus');\n  }\n}\n\nexport default class LiquiditySwapAdapterService\n  extends BaseService<IParaSwapLiquiditySwapAdapter>\n  implements LiquiditySwapAdapterInterface {\n  readonly liquiditySwapAdapterAddress: string;\n\n  readonly swapCollateralConfig: LendingPoolMarketConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    swapCollateralConfig: LendingPoolMarketConfig | undefined\n  ) {\n    super(config, IParaSwapLiquiditySwapAdapter__factory);\n    this.swapCollateralConfig = swapCollateralConfig;\n\n    this.liquiditySwapAdapterAddress =\n      this.swapCollateralConfig?.SWAP_COLLATERAL_ADAPTER || '';\n  }\n\n  @LiquiditySwapValidator\n  public swapAndDeposit(\n    @IsEthAddress('user')\n    @IsEthAddress('assetToSwapFrom')\n    @IsEthAddress('assetToSwapTo')\n    @IsEthAddress('augustus')\n    @IsPositiveAmount('amountToSwap')\n    @IsPositiveAmount('minAmountToReceive')\n    {\n      user,\n      assetToSwapFrom,\n      assetToSwapTo,\n      amountToSwap,\n      minAmountToReceive,\n      permitParams,\n      augustus,\n      swapCallData,\n      swapAll,\n    }: SwapAndDepositMethodType,\n    txs?: EthereumTransactionTypeExtended[]\n  ): EthereumTransactionTypeExtended {\n    const liquiditySwapContract = this.getContractInstance(\n      this.liquiditySwapAdapterAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        liquiditySwapContract.populateTransaction.swapAndDeposit(\n          assetToSwapFrom,\n          assetToSwapTo,\n          amountToSwap,\n          minAmountToReceive,\n          swapAll\n            ? augustusFromAmountOffsetFromCalldata(swapCallData as string)\n            : 0,\n          swapCallData,\n          augustus,\n          permitParams\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs || [],\n        txCallback,\n        ProtocolAction.swapCollateral\n      ),\n    };\n  }\n}\n","import { constants, utils, BigNumberish, BytesLike } from 'ethers';\nimport {\n  API_ETH_MOCK_ADDRESS,\n  DEFAULT_APPROVE_AMOUNT,\n  MAX_UINT_AMOUNT,\n  SURPLUS,\n} from '../../config';\nimport { ILendingPool, ILendingPool__factory } from '../../contract-types';\nimport IERC20ServiceInterface from '../../interfaces/ERC20';\nimport SynthetixInterface from '../../interfaces/Synthetix';\nimport LendingPoolInterface from '../../interfaces/v2/LendingPool';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  InterestRate,\n  ProtocolAction,\n  TokenMetadataType,\n  transactionType,\n  tStringDecimalUnits,\n  tEthereumAddress,\n  LendingPoolMarketConfig,\n} from '../../types';\nimport { getTxValue, parseNumber } from '../../utils/parsings';\nimport {\n  LPFlashLiquidationValidator,\n  LPRepayWithCollateralValidator,\n  LPSwapCollateralValidator,\n  LPValidator,\n} from '../../validators/methodValidators';\nimport {\n  LPBorrowParamsType,\n  LPDepositParamsType,\n  LPLiquidationCall,\n  LPRepayParamsType,\n  LPRepayWithCollateral,\n  LPSetUsageAsCollateral,\n  LPSwapBorrowRateMode,\n  LPSwapCollateral,\n  LPWithdrawParamsType,\n  LPFlashLiquidation,\n} from '../../types/LendingPoolMethodTypes';\nimport WETHGatewayInterface from '../../interfaces/WETHGateway';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n} from '../../validators/paramValidators';\nimport LiquiditySwapAdapterInterface from '../../interfaces/LiquiditySwapAdapterParaswap';\nimport RepayWithCollateralAdapterInterface from '../../interfaces/RepayWithCollateralAdapter';\nimport BaseService from '../BaseService';\nimport { augustusFromAmountOffsetFromCalldata } from '../LiquiditySwapAdapterParaswap';\n\nconst buildParaSwapLiquiditySwapParams = (\n  assetToSwapTo: tEthereumAddress,\n  minAmountToReceive: BigNumberish,\n  swapAllBalanceOffset: BigNumberish,\n  swapCalldata: string | Buffer | BytesLike,\n  augustus: tEthereumAddress,\n  permitAmount: BigNumberish,\n  deadline: BigNumberish,\n  v: BigNumberish,\n  r: string | Buffer | BytesLike,\n  s: string | Buffer | BytesLike\n) => {\n  return utils.defaultAbiCoder.encode(\n    [\n      'address',\n      'uint256',\n      'uint256',\n      'bytes',\n      'address',\n      'tuple(uint256,uint256,uint8,bytes32,bytes32)',\n    ],\n    [\n      assetToSwapTo,\n      minAmountToReceive,\n      swapAllBalanceOffset,\n      swapCalldata,\n      augustus,\n      [permitAmount, deadline, v, r, s],\n    ]\n  );\n};\n\nexport default class LendingPool\n  extends BaseService<ILendingPool>\n  implements LendingPoolInterface {\n  readonly market: string;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly lendingPoolAddress: string;\n\n  readonly synthetixService: SynthetixInterface;\n\n  readonly wethGatewayService: WETHGatewayInterface;\n\n  readonly liquiditySwapAdapterService: LiquiditySwapAdapterInterface;\n\n  readonly repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface;\n\n  readonly lendingPoolConfig: LendingPoolMarketConfig | undefined;\n\n  readonly flashLiquidationAddress: string;\n\n  readonly swapCollateralAddress: string;\n\n  readonly repayWithCollateralAddress: string;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    synthetixService: SynthetixInterface,\n    wethGatewayService: WETHGatewayInterface,\n    liquiditySwapAdapterService: LiquiditySwapAdapterInterface,\n    repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface,\n    market: string,\n    lendingPoolConfig: LendingPoolMarketConfig | undefined\n  ) {\n    super(config, ILendingPool__factory);\n    this.erc20Service = erc20Service;\n    this.synthetixService = synthetixService;\n    this.wethGatewayService = wethGatewayService;\n    this.liquiditySwapAdapterService = liquiditySwapAdapterService;\n    this.repayWithCollateralAdapterService = repayWithCollateralAdapterService;\n    this.market = market;\n    this.lendingPoolConfig = lendingPoolConfig;\n\n    const {\n      LENDING_POOL,\n      FLASH_LIQUIDATION_ADAPTER,\n      REPAY_WITH_COLLATERAL_ADAPTER,\n      SWAP_COLLATERAL_ADAPTER,\n    } = this.lendingPoolConfig || {};\n\n    this.lendingPoolAddress = LENDING_POOL || '';\n    this.flashLiquidationAddress = FLASH_LIQUIDATION_ADAPTER || '';\n    this.swapCollateralAddress = SWAP_COLLATERAL_ADAPTER || '';\n    this.repayWithCollateralAddress = REPAY_WITH_COLLATERAL_ADAPTER || '';\n  }\n\n  @LPValidator\n  public async deposit(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    { user, reserve, amount, onBehalfOf, referralCode }: LPDepositParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return this.wethGatewayService.depositETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        onBehalfOf,\n        referralCode,\n      });\n    }\n    const {\n      isApproved,\n      approve,\n      decimalsOf,\n    }: IERC20ServiceInterface = this.erc20Service;\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const reserveDecimals: number = await decimalsOf(reserve);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      reserveDecimals\n    );\n\n    const fundsAvailable: boolean = await this.synthetixService.synthetixValidation(\n      user,\n      reserve,\n      convertedAmount\n    );\n    if (!fundsAvailable) {\n      throw new Error('Not enough funds to execute operation');\n    }\n\n    const approved = await isApproved(\n      reserve,\n      user,\n      this.lendingPoolAddress,\n      amount\n    );\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        reserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.deposit(\n          reserve,\n          convertedAmount,\n          onBehalfOf || user,\n          referralCode || '0'\n        ),\n      from: user,\n      value: getTxValue(reserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.deposit\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async withdraw(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    @IsEthAddress('aTokenAddress')\n    { user, reserve, amount, onBehalfOf, aTokenAddress }: LPWithdrawParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      if (!aTokenAddress) {\n        throw new Error(\n          'To withdraw ETH you need to pass the aWETH token address'\n        );\n      }\n\n      return this.wethGatewayService.withdrawETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        onBehalfOf,\n        aTokenAddress,\n      });\n    }\n    const { decimalsOf }: IERC20ServiceInterface = this.erc20Service;\n    const decimals: number = await decimalsOf(reserve);\n\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, decimals);\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.withdraw(\n          reserve,\n          convertedAmount,\n          onBehalfOf || user\n        ),\n      from: user,\n      action: ProtocolAction.withdraw,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          [],\n          txCallback,\n          ProtocolAction.withdraw\n        ),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async borrow(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('debtTokenAddress')\n    @IsEthAddress('onBehalfOf')\n    {\n      user,\n      reserve,\n      amount,\n      interestRateMode,\n      debtTokenAddress,\n      onBehalfOf,\n      referralCode,\n    }: LPBorrowParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      if (!debtTokenAddress) {\n        throw new Error(\n          `To borrow ETH you need to pass the stable or variable WETH debt Token Address corresponding the interestRateMode`\n        );\n      }\n      return this.wethGatewayService.borrowETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        debtTokenAddress,\n        interestRateMode,\n        referralCode,\n      });\n    }\n    const { decimalsOf }: IERC20ServiceInterface = this.erc20Service;\n    const reserveDecimals = await decimalsOf(reserve);\n    const formatAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      reserveDecimals\n    );\n\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.borrow(\n          reserve,\n          formatAmount,\n          numericRateMode,\n          referralCode || 0,\n          onBehalfOf || user\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async repay(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    { user, reserve, amount, interestRateMode, onBehalfOf }: LPRepayParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return this.wethGatewayService.repayETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        interestRateMode,\n        onBehalfOf,\n      });\n    }\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const {\n      isApproved,\n      approve,\n      decimalsOf,\n    }: IERC20ServiceInterface = this.erc20Service;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n    const { populateTransaction }: ILendingPool = lendingPoolContract;\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n    const decimals: number = await decimalsOf(reserve);\n\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, decimals);\n\n    if (amount !== '-1') {\n      const fundsAvailable: boolean = await this.synthetixService.synthetixValidation(\n        user,\n        reserve,\n        convertedAmount\n      );\n      if (!fundsAvailable) {\n        throw new Error('Not enough funds to execute operation');\n      }\n    }\n\n    const approved: boolean = await isApproved(\n      reserve,\n      user,\n      this.lendingPoolAddress,\n      amount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        reserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        populateTransaction.repay(\n          reserve,\n          convertedAmount,\n          numericRateMode,\n          onBehalfOf || user\n        ),\n      from: user,\n      value: getTxValue(reserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.repay\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async swapBorrowRateMode(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    { user, reserve, interestRateMode }: LPSwapBorrowRateMode\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.swapBorrowRateMode(\n          reserve,\n          numericRateMode\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        txType: eEthereumTxType.DLP_ACTION,\n        tx: txCallback,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async setUsageAsCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    { user, reserve, usageAsCollateral }: LPSetUsageAsCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.setUserUseReserveAsCollateral(\n          reserve,\n          usageAsCollateral\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async liquidationCall(\n    @IsEthAddress('liquidator')\n    @IsEthAddress('liquidatedUser')\n    @IsEthAddress('debtReserve')\n    @IsEthAddress('collateralReserve')\n    @IsPositiveAmount('purchaseAmount')\n    {\n      liquidator,\n      liquidatedUser,\n      debtReserve,\n      collateralReserve,\n      purchaseAmount,\n      getAToken,\n      liquidateAll,\n    }: LPLiquidationCall\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const {\n      isApproved,\n      approve,\n      getTokenData,\n    }: IERC20ServiceInterface = this.erc20Service;\n\n    const approved = await isApproved(\n      debtReserve,\n      liquidator,\n      this.lendingPoolAddress,\n      purchaseAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        liquidator,\n        debtReserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n\n      txs.push(approveTx);\n    }\n\n    const [debtReserveInfo]: TokenMetadataType[] = await Promise.all([\n      getTokenData(debtReserve),\n    ]);\n\n    const reserveDecimals: number = debtReserveInfo.decimals;\n\n    const convertedAmount: tStringDecimalUnits = liquidateAll\n      ? MAX_UINT_AMOUNT\n      : parseNumber(purchaseAmount, reserveDecimals);\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.liquidationCall(\n          collateralReserve,\n          debtReserve,\n          liquidatedUser,\n          convertedAmount,\n          getAToken || false\n        ),\n      from: liquidator,\n      value: getTxValue(debtReserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.liquidationCall\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPSwapCollateralValidator\n  public async swapCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('fromAsset')\n    @IsEthAddress('fromAToken')\n    @IsEthAddress('toAsset')\n    @IsEthAddress('onBehalfOf')\n    @IsEthAddress('augustus')\n    @IsPositiveAmount('fromAmount')\n    @IsPositiveAmount('minToAmount')\n    {\n      user,\n      flash,\n      fromAsset,\n      fromAToken,\n      toAsset,\n      fromAmount,\n      minToAmount,\n      permitSignature,\n      swapAll,\n      onBehalfOf,\n      referralCode,\n      augustus,\n      swapCallData,\n    }: LPSwapCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const permitParams = permitSignature || {\n      amount: '0',\n      deadline: '0',\n      v: 0,\n      r: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      s: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    };\n\n    const approved: boolean = await this.erc20Service.isApproved(\n      fromAToken,\n      user,\n      this.swapCollateralAddress,\n      fromAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = this.erc20Service.approve(\n        user,\n        fromAToken,\n        this.swapCollateralAddress,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveTx);\n    }\n\n    const tokenDecimals: number = await this.erc20Service.decimalsOf(fromAsset);\n\n    const convertedAmount: string = parseNumber(fromAmount, tokenDecimals);\n\n    const tokenToDecimals: number = await this.erc20Service.decimalsOf(toAsset);\n\n    const amountSlippageConverted: string = parseNumber(\n      minToAmount,\n      tokenToDecimals\n    );\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const params = buildParaSwapLiquiditySwapParams(\n      toAsset,\n      amountSlippageConverted,\n      swapAll\n        ? augustusFromAmountOffsetFromCalldata(swapCallData as string)\n        : 0,\n      swapCallData,\n      augustus,\n      permitParams.amount,\n      permitParams.deadline,\n      permitParams.v,\n      permitParams.r,\n      permitParams.s\n    );\n\n    if (flash) {\n      const amountWithSurplus: string = (\n        Number(fromAmount) +\n        (Number(fromAmount) * Number(SURPLUS)) / 100\n      ).toString();\n\n      const convertedAmountWithSurplus: string = parseNumber(\n        amountWithSurplus,\n        tokenDecimals\n      );\n\n      const txCallback: () => Promise<transactionType> = this.generateTxCallback(\n        {\n          rawTxMethod: () =>\n            lendingPoolContract.populateTransaction.flashLoan(\n              this.swapCollateralAddress,\n              [fromAsset],\n              swapAll ? [convertedAmountWithSurplus] : [convertedAmount],\n              [0], // interest rate mode to NONE for flashloan to not open debt\n              onBehalfOf || user,\n              params,\n              referralCode || '0'\n            ),\n          from: user,\n        }\n      );\n\n      txs.push({\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          txs,\n          txCallback,\n          ProtocolAction.swapCollateral\n        ),\n      });\n      return txs;\n    }\n\n    // Direct call to swap and deposit\n    const swapAndDepositTx: EthereumTransactionTypeExtended = await this.liquiditySwapAdapterService.swapAndDeposit(\n      {\n        user,\n        assetToSwapFrom: fromAsset,\n        assetToSwapTo: toAsset,\n        amountToSwap: convertedAmount,\n        minAmountToReceive: amountSlippageConverted,\n        swapAll,\n        swapCallData,\n        augustus,\n        permitParams,\n      },\n      txs\n    );\n\n    txs.push(swapAndDepositTx);\n    return txs;\n  }\n\n  @LPRepayWithCollateralValidator\n  public async repayWithCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('fromAsset')\n    @IsEthAddress('fromAToken')\n    @IsEthAddress('assetToRepay')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('repayWithAmount')\n    @IsPositiveAmount('repayAmount')\n    {\n      user,\n      fromAsset,\n      fromAToken,\n      assetToRepay,\n      repayWithAmount,\n      repayAmount,\n      permitSignature,\n      repayAllDebt,\n      rateMode,\n      onBehalfOf,\n      referralCode,\n      flash,\n      useEthPath,\n    }: LPRepayWithCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const permitParams = permitSignature || {\n      amount: '0',\n      deadline: '0',\n      v: 0,\n      r: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      s: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    };\n\n    const approved: boolean = await this.erc20Service.isApproved(\n      fromAToken,\n      user,\n      this.repayWithCollateralAddress,\n      repayWithAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = this.erc20Service.approve(\n        user,\n        fromAToken,\n        this.repayWithCollateralAddress,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveTx);\n    }\n\n    const fromDecimals: number = await this.erc20Service.decimalsOf(fromAsset);\n    const convertedRepayWithAmount: string = parseNumber(\n      repayWithAmount,\n      fromDecimals\n    );\n\n    const repayAmountWithSurplus: string = (\n      Number(repayAmount) +\n      (Number(repayAmount) * Number(SURPLUS)) / 100\n    ).toString();\n\n    const decimals: number = await this.erc20Service.decimalsOf(assetToRepay);\n    const convertedRepayAmount: string = repayAllDebt\n      ? parseNumber(repayAmountWithSurplus, decimals)\n      : parseNumber(repayAmount, decimals);\n\n    let numericInterestRate = 0;\n    if (rateMode) {\n      numericInterestRate = rateMode === InterestRate.Stable ? 1 : 2;\n    }\n\n    if (flash) {\n      const params: string = utils.defaultAbiCoder.encode(\n        [\n          'address',\n          'uint256',\n          'uint256',\n          'uint256',\n          'uint256',\n          'uint8',\n          'bytes32',\n          'bytes32',\n          'bool',\n        ],\n        [\n          fromAsset,\n          convertedRepayWithAmount,\n          numericInterestRate,\n          permitParams.amount,\n          permitParams.deadline,\n          permitParams.v,\n          permitParams.r,\n          permitParams.s,\n          useEthPath || false,\n        ]\n      );\n\n      const lendingPoolContract = this.getContractInstance(\n        this.lendingPoolAddress\n      );\n\n      const txCallback: () => Promise<transactionType> = this.generateTxCallback(\n        {\n          rawTxMethod: () =>\n            lendingPoolContract.populateTransaction.flashLoan(\n              this.repayWithCollateralAddress,\n              [assetToRepay],\n              [convertedRepayAmount],\n              [0], // interest rate mode to NONE for flashloan to not open debt\n              onBehalfOf || user,\n              params,\n              referralCode || '0'\n            ),\n          from: user,\n        }\n      );\n\n      txs.push({\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          txs,\n          txCallback,\n          ProtocolAction.repayCollateral\n        ),\n      });\n\n      return txs;\n    }\n\n    const swapAndRepayTx: EthereumTransactionTypeExtended = this.repayWithCollateralAdapterService.swapAndRepay(\n      {\n        user,\n        collateralAsset: fromAsset,\n        debtAsset: assetToRepay,\n        collateralAmount: convertedRepayWithAmount,\n        debtRepayAmount: convertedRepayAmount,\n        debtRateMode: numericInterestRate,\n        permit: permitParams,\n        useEthPath,\n      },\n      txs\n    );\n\n    txs.push(swapAndRepayTx);\n\n    return txs;\n  }\n\n  @LPFlashLiquidationValidator\n  public async flashLiquidation(\n    @IsEthAddress('user')\n    @IsEthAddress('collateralAsset')\n    @IsEthAddress('borrowedAsset')\n    @IsPositiveAmount('debtTokenCover')\n    @IsEthAddress('initiator')\n    {\n      user,\n      collateralAsset,\n      borrowedAsset,\n      debtTokenCover,\n      liquidateAll,\n      initiator,\n      useEthPath,\n    }: LPFlashLiquidation\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const addSurplus = (amount: string): string => {\n      return (\n        Number(amount) +\n        (Number(amount) * Number(amount)) / 100\n      ).toString();\n    };\n\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const tokenDecimals: number = await this.erc20Service.decimalsOf(\n      borrowedAsset\n    );\n\n    const convertedDebt = parseNumber(debtTokenCover, tokenDecimals);\n\n    const convertedDebtTokenCover: string = liquidateAll\n      ? constants.MaxUint256.toString()\n      : convertedDebt;\n\n    const flashBorrowAmount = liquidateAll\n      ? parseNumber(addSurplus(debtTokenCover), tokenDecimals)\n      : convertedDebt;\n\n    const params: string = utils.defaultAbiCoder.encode(\n      ['address', 'address', 'address', 'uint256', 'bool'],\n      [\n        collateralAsset,\n        borrowedAsset,\n        user,\n        convertedDebtTokenCover,\n        useEthPath || false,\n      ]\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.flashLoan(\n          this.flashLiquidationAddress,\n          [borrowedAsset],\n          [flashBorrowAmount],\n          [0],\n          initiator,\n          params,\n          '0'\n        ),\n      from: initiator,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.liquidationFlash\n      ),\n    });\n    return txs;\n  }\n}\n","import { BigNumber } from 'ethers';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n  TokenMetadataType,\n} from '../types';\nimport { API_ETH_MOCK_ADDRESS, SUPER_BIG_ALLOWANCE_NUMBER } from '../config';\nimport { IERC20Detailed, IERC20Detailed__factory } from '../contract-types';\nimport BaseService from './BaseService';\nimport { parseNumber } from '../utils/parsings';\n\nexport default class ERC20Service\n  extends BaseService<IERC20Detailed>\n  implements IERC20ServiceInterface {\n  readonly tokenDecimals: { [address: string]: number };\n\n  constructor(config: Configuration) {\n    super(config, IERC20Detailed__factory);\n    this.tokenDecimals = {};\n  }\n\n  public approve = (\n    user: tEthereumAddress,\n    token: tEthereumAddress,\n    spender: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): EthereumTransactionTypeExtended => {\n    const erc20Contract = this.getContractInstance(token);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        erc20Contract.populateTransaction.approve(spender, amount),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.ERC20_APPROVAL,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  };\n\n  public isApproved = async (\n    token: tEthereumAddress,\n    userAddress: tEthereumAddress,\n    spender: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<boolean> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) return true;\n    const decimals = await this.decimalsOf(token);\n    const erc20Contract: IERC20Detailed = this.getContractInstance(token);\n    const allowance: BigNumber = await erc20Contract.allowance(\n      userAddress,\n      spender\n    );\n    const amountBNWithDecimals: BigNumber =\n      amount === '-1'\n        ? BigNumber.from(SUPER_BIG_ALLOWANCE_NUMBER)\n        : BigNumber.from(parseNumber(amount, decimals));\n    return allowance.gte(amountBNWithDecimals);\n  };\n\n  public decimalsOf = async (token: tEthereumAddress): Promise<number> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) return 18;\n    if (!this.tokenDecimals[token]) {\n      const erc20Contract = this.getContractInstance(token);\n      this.tokenDecimals[token] = await erc20Contract.decimals();\n    }\n\n    return this.tokenDecimals[token];\n  };\n\n  public getTokenData = async (\n    token: tEthereumAddress\n  ): Promise<TokenMetadataType> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18,\n        address: token,\n      };\n    }\n    // Needed because MKR does not return string for symbol and Name\n    if (\n      token.toLowerCase() ===\n      '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'.toLowerCase()\n    ) {\n      return {\n        name: 'Maker',\n        symbol: 'MKR',\n        decimals: 18,\n        address: token,\n      };\n    }\n\n    const {\n      name: nameGetter,\n      symbol: symbolGetter,\n      decimals: decimalsGetter,\n    }: IERC20Detailed = this.getContractInstance(token);\n\n    const [name, symbol, decimals]: [\n      string,\n      string,\n      number\n    ] = await Promise.all([nameGetter(), symbolGetter(), decimalsGetter()]);\n\n    return {\n      name,\n      symbol,\n      decimals,\n      address: token,\n    };\n  };\n}\n","import { DEFAULT_NULL_VALUE_ON_TX } from '../config';\nimport {\n  IFaucet,\n  IMinter,\n  IFaucet__factory,\n  IMinter__factory,\n} from '../contract-types';\nimport FaucetInterface from '../interfaces/Faucet';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  LendingPoolMarketConfig,\n  transactionType,\n} from '../types';\nimport { FaucetParamsType } from '../types/FaucetMethodTypes';\nimport { mintAmountsPerToken } from '../utils/parsings';\nimport { FaucetValidator } from '../validators/methodValidators';\nimport { IsEthAddress } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class FaucetService\n  extends BaseService<IMinter>\n  implements FaucetInterface {\n  readonly faucetAddress: string;\n\n  readonly faucetContract: IFaucet;\n\n  readonly faucetConfig: LendingPoolMarketConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    faucetConfig: LendingPoolMarketConfig | undefined\n  ) {\n    super(config, IMinter__factory);\n\n    this.faucetConfig = faucetConfig;\n\n    const { provider } = this.config;\n\n    this.faucetAddress = this.faucetConfig?.FAUCET || '';\n\n    if (this.faucetAddress !== '') {\n      this.faucetContract = IFaucet__factory.connect(\n        this.faucetAddress,\n        provider\n      );\n    }\n  }\n\n  @FaucetValidator\n  public async mint(\n    @IsEthAddress('userAddress')\n    @IsEthAddress('reserve')\n    { userAddress, reserve, tokenSymbol }: FaucetParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const amount: string = mintAmountsPerToken[tokenSymbol];\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        this.faucetContract.populateTransaction.mint(reserve, amount),\n      from: userAddress,\n      value: DEFAULT_NULL_VALUE_ON_TX,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.FAUCET_MINT,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import IERC20ServiceInterface from '../interfaces/ERC20';\nimport { DEFAULT_APPROVE_AMOUNT } from '../config';\nimport {\n  ILendToAaveMigrator,\n  ILendToAaveMigrator__factory,\n} from '../contract-types';\nimport LTAMigratorInterface from '../interfaces/LTAMigrator';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  MigratorConfig,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport BaseService from './BaseService';\nimport { LTAMigratorValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\n\nexport default class LTAMigratorService\n  extends BaseService<ILendToAaveMigrator>\n  implements LTAMigratorInterface {\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly migratorAddress: string;\n\n  readonly migratorConfig: MigratorConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    migratorConfig: MigratorConfig | undefined\n  ) {\n    super(config, ILendToAaveMigrator__factory);\n    this.erc20Service = erc20Service;\n    this.migratorConfig = migratorConfig;\n\n    this.migratorAddress = this.migratorConfig?.LEND_TO_AAVE_MIGRATOR || '';\n  }\n\n  @LTAMigratorValidator\n  public async migrateLendToAave(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const { isApproved, approve, decimalsOf } = this.erc20Service;\n\n    const migratorContract: ILendToAaveMigrator = this.getContractInstance(\n      this.migratorAddress\n    );\n    const lendToken: string = await migratorContract.LEND();\n\n    const approved: boolean = await isApproved(\n      lendToken,\n      user,\n      this.migratorAddress,\n      amount\n    );\n\n    if (!approved) {\n      txs.push(\n        approve(user, lendToken, this.migratorAddress, DEFAULT_APPROVE_AMOUNT)\n      );\n    }\n\n    const decimals: number = await decimalsOf(lendToken);\n    const convertedAmount: string = await parseNumber(amount, decimals);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        migratorContract.populateTransaction.migrateFromLEND(convertedAmount),\n      from: user,\n    });\n\n    txs.push({\n      txType: eEthereumTxType.MIGRATION_LEND_AAVE,\n      tx: txCallback,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n}\n","import { constants, utils, Signature } from 'ethers';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport { DEFAULT_APPROVE_AMOUNT, MAX_UINT_AMOUNT } from '../config';\nimport {\n  IStakedToken,\n  IAaveStakingHelper,\n  IAaveStakingHelper__factory,\n  IStakedToken__factory,\n} from '../contract-types';\nimport StakingInterface from '../interfaces/Staking';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  StakingNetworkConfig,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport {\n  SignStakingValidator,\n  StakingValidator,\n} from '../validators/methodValidators';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n  Optional,\n} from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class StakingService\n  extends BaseService<IStakedToken>\n  implements StakingInterface {\n  readonly stakingHelperContract: IAaveStakingHelper;\n\n  public readonly stakingContractAddress: tEthereumAddress;\n\n  public readonly stakingRewardTokenContractAddress: tEthereumAddress;\n\n  readonly stakingHelperContractAddress: tEthereumAddress | undefined;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly tokenStake: string;\n\n  readonly stakingConfig: StakingNetworkConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    tokenStake: string,\n    stakingConfig: StakingNetworkConfig | undefined\n  ) {\n    super(config, IStakedToken__factory);\n    this.stakingConfig = stakingConfig;\n    this.tokenStake = tokenStake;\n    this.erc20Service = erc20Service;\n\n    const { provider } = this.config;\n\n    const { TOKEN_STAKING, STAKING_REWARD_TOKEN, STAKING_HELPER } =\n      this.stakingConfig || {};\n\n    this.stakingContractAddress = TOKEN_STAKING || '';\n    this.stakingRewardTokenContractAddress = STAKING_REWARD_TOKEN || '';\n    this.stakingHelperContractAddress = STAKING_HELPER;\n\n    if (this.stakingHelperContractAddress) {\n      this.stakingHelperContract = IAaveStakingHelper__factory.connect(\n        this.stakingHelperContractAddress,\n        provider\n      );\n    }\n  }\n\n  @SignStakingValidator\n  public async signStaking(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    nonce: string\n  ): Promise<string> {\n    if (!this.stakingHelperContractAddress) return '';\n\n    const { getTokenData } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const { name, decimals } = await getTokenData(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, decimals);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        Permit: [\n          { name: 'owner', type: 'address' },\n          { name: 'spender', type: 'address' },\n          { name: 'value', type: 'uint256' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'deadline', type: 'uint256' },\n        ],\n      },\n      primaryType: 'Permit' as const,\n      domain: {\n        name,\n        version: '1',\n        chainId: ChainId[this.config.network],\n        verifyingContract: stakedToken,\n      },\n      message: {\n        owner: user,\n        spender: this.stakingHelperContractAddress,\n        value: convertedAmount,\n        nonce,\n        deadline: constants.MaxUint256.toString(),\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @StakingValidator\n  public async stakeWithPermit(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    signature: string\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (!this.stakingHelperContractAddress) return [];\n\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { decimalsOf } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      stakedTokenDecimals\n    );\n    const sig: Signature = utils.splitSignature(signature);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        this.stakingHelperContract.populateTransaction.stake(\n          user,\n          convertedAmount,\n          sig.v,\n          sig.r,\n          sig.s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.STAKE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @StakingValidator\n  public async stake(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    @Optional @IsEthAddress() onBehalfOf?: tEthereumAddress\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { decimalsOf, isApproved, approve } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      stakedTokenDecimals\n    );\n    const approved: boolean = await isApproved(\n      stakedToken,\n      user,\n      this.stakingContractAddress,\n      amount\n    );\n    if (!approved) {\n      const approveTx = approve(\n        user,\n        stakedToken,\n        this.stakingContractAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.stake(\n          onBehalfOf || user,\n          convertedAmount\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.STAKE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @StakingValidator\n  public async redeem(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveOrMinusOneAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    let convertedAmount: tStringDecimalUnits;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    if (amount === '-1') {\n      convertedAmount = MAX_UINT_AMOUNT;\n    } else {\n      const { decimalsOf } = this.erc20Service;\n\n      const stakedToken: string = await stakingContract.STAKED_TOKEN();\n      const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n      convertedAmount = parseNumber(amount, stakedTokenDecimals);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.redeem(user, convertedAmount),\n      from: user,\n      gasSurplus: 20,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @StakingValidator\n  public async cooldown(\n    @IsEthAddress() user: tEthereumAddress\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => stakingContract.populateTransaction.cooldown(),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @StakingValidator\n  public async claimRewards(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveOrMinusOneAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    let convertedAmount: tStringDecimalUnits;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    if (amount === '-1') {\n      convertedAmount = MAX_UINT_AMOUNT;\n    } else {\n      const { decimalsOf } = this.erc20Service;\n      const stakedToken: string = await stakingContract.REWARD_TOKEN();\n      const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n      convertedAmount = parseNumber(amount, stakedTokenDecimals);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.claimRewards(user, convertedAmount),\n      from: user,\n      gasSurplus: 20,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { BigNumber } from 'ethers';\nimport BaseService from './BaseService';\nimport { Configuration, tStringDecimalUnits } from '../types';\nimport { ISynthetix, ISynthetix__factory } from '../contract-types';\nimport SynthetixInterface from '../interfaces/Synthetix';\nimport { cosntantAddressesByNetwork } from '../config';\n\nexport default class SynthetixService\n  extends BaseService<ISynthetix>\n  implements SynthetixInterface {\n  readonly synthAddress: string;\n  constructor(config: Configuration) {\n    super(config, ISynthetix__factory);\n    const { network } = this.config;\n\n    this.synthAddress =\n      cosntantAddressesByNetwork[network]?.SYNTHETIX_PROXY_ADDRESS || '';\n  }\n\n  public synthetixValidation = async (\n    userAddress: string,\n    reserve: string,\n    amount: tStringDecimalUnits\n  ): Promise<boolean> => {\n    if (reserve.toUpperCase() === this.synthAddress.toUpperCase()) {\n      return this.isSnxTransferable(userAddress, amount);\n    }\n    return true;\n  };\n\n  readonly isSnxTransferable = async (\n    userAddress: string,\n    amount: tStringDecimalUnits\n  ): Promise<boolean> => {\n    const synthContract = this.getContractInstance(this.synthAddress);\n\n    const transferableAmount: BigNumber = await synthContract.transferableSynthetix(\n      userAddress\n    );\n    return BigNumber.from(amount).lte(transferableAmount);\n  };\n}\n","import { constants } from 'ethers';\nimport {\n  IAaveIncentivesController,\n  IAaveIncentivesController__factory,\n} from '../contract-types';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  IncentivesConfig,\n  tEthereumAddress,\n  transactionType,\n} from '../types';\nimport { IncentivesValidator } from '../validators/methodValidators';\nimport { IsEthAddress } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport type ClaimRewardsMethodType = {\n  user: string;\n  assets: string[];\n  to: string;\n};\n\nexport interface IncentivesControllerInterface {\n  incentivesControllerRewardTokenAddress: tEthereumAddress;\n  claimRewards: (\n    args: ClaimRewardsMethodType\n  ) => EthereumTransactionTypeExtended[];\n}\n\nexport default class IncentivesController\n  extends BaseService<IAaveIncentivesController>\n  implements IncentivesControllerInterface {\n  public readonly incentivesControllerRewardTokenAddress: tEthereumAddress;\n  readonly incentivesControllerAddress: string;\n\n  readonly incentivesConfig: IncentivesConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    incentivesConfig: IncentivesConfig | undefined\n  ) {\n    super(config, IAaveIncentivesController__factory);\n    this.incentivesConfig = incentivesConfig;\n\n    const { INCENTIVES_CONTROLLER, INCENTIVES_CONTROLLER_REWARD_TOKEN } =\n      this.incentivesConfig || {};\n\n    this.incentivesControllerAddress = INCENTIVES_CONTROLLER || '';\n    this.incentivesControllerRewardTokenAddress =\n      INCENTIVES_CONTROLLER_REWARD_TOKEN || '';\n  }\n\n  @IncentivesValidator\n  public claimRewards(\n    @IsEthAddress('user')\n    // @IsEthAddressArray('assets')\n    @IsEthAddress('to')\n    { user, assets, to }: ClaimRewardsMethodType\n  ): EthereumTransactionTypeExtended[] {\n    const incentivesContract: IAaveIncentivesController = this.getContractInstance(\n      this.incentivesControllerAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        incentivesContract.populateTransaction.claimRewards(\n          assets,\n          constants.MaxUint256.toString(),\n          to || user\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.REWARD_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { TxBuilderConfig } from '../types';\n\nexport const defaultConfig: TxBuilderConfig = {\n  governance: {\n    mainnet: {\n      AAVE_GOVERNANCE_V2: '0xEC568fffba86c094cf06b22134B23074DFE2252c',\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT:\n        '0x61910EcD7e8e942136CE7Fe7943f956cea1CC2f7',\n      AAVE_GOVERNANCE_V2_EXECUTOR_LONG:\n        '0xEE56e2B3D491590B5b31738cC34d5232F378a8D5',\n      AAVE_GOVERNANCE_V2_HELPER: '0x16ff7583ea21055bf5f929ec4b896d997ff35847',\n    },\n    kovan: {\n      AAVE_GOVERNANCE_V2: '0xc2eBaB3Bac8f2f5028f5C7317027A41EBFCa31D2',\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT:\n        '0x462eD5dc919BE6C96639D5f31ab919EBA8F31831',\n      AAVE_GOVERNANCE_V2_EXECUTOR_LONG:\n        '0x7e5195b0A6a60b371Ba3276032CF6958eADFA652',\n      AAVE_GOVERNANCE_V2_HELPER: '0xffd5BEb5712952FC9a9DDC7499487422B29Fdda6',\n    },\n  },\n  lendingPool: {\n    mainnet: {\n      proto: {\n        LENDING_POOL: '0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9',\n        WETH_GATEWAY: '0xcc9a0B7c43DC2a5F023Bb9b738E45B0Ef6B06E04',\n        FLASH_LIQUIDATION_ADAPTER: '0xE377fB98512D7b04827e56BC84e1838804a8019D',\n        REPAY_WITH_COLLATERAL_ADAPTER:\n          '0x498c5431eb517101582988fbb36431ddaac8f4b1',\n        SWAP_COLLATERAL_ADAPTER: '0x135896DE8421be2ec868E0b811006171D9df802A',\n      },\n      amm: {\n        LENDING_POOL: '0x7937d4799803fbbe595ed57278bc4ca21f3bffcb',\n        WETH_GATEWAY: '0xcc9a0B7c43DC2a5F023Bb9b738E45B0Ef6B06E04',\n        FLASH_LIQUIDATION_ADAPTER: '0xE377fB98512D7b04827e56BC84e1838804a8019D',\n        REPAY_WITH_COLLATERAL_ADAPTER:\n          '0x498c5431eb517101582988fbb36431ddaac8f4b1',\n        SWAP_COLLATERAL_ADAPTER: '0x135896DE8421be2ec868E0b811006171D9df802A',\n      },\n    },\n    kovan: {\n      proto: {\n        LENDING_POOL: '0xE0fBa4Fc209b4948668006B2bE61711b7f465bAe',\n        WETH_GATEWAY: '0xA61ca04DF33B72b235a8A28CfB535bb7A5271B70',\n        FLASH_LIQUIDATION_ADAPTER: '0x9D50F0b23b1805773f607F0B4678d724322B7AC2',\n        REPAY_WITH_COLLATERAL_ADAPTER:\n          '0xf86Be05f535EC2d217E4c6116B3fa147ee5C05A1',\n        SWAP_COLLATERAL_ADAPTER: '0xC18451d36aA370fDACe8d45839bF975F48f7AEa1',\n        FAUCET: '0x600103d518cC5E8f3319D532eB4e5C268D32e604',\n      },\n      amm: {\n        LENDING_POOL: '0x762E2a3BBe729240ea44D31D5a81EAB44d34ef01',\n        WETH_GATEWAY: '0xA61ca04DF33B72b235a8A28CfB535bb7A5271B70',\n        FLASH_LIQUIDATION_ADAPTER: '0x9D50F0b23b1805773f607F0B4678d724322B7AC2',\n        REPAY_WITH_COLLATERAL_ADAPTER:\n          '0xf86Be05f535EC2d217E4c6116B3fa147ee5C05A1',\n        SWAP_COLLATERAL_ADAPTER: '0xC18451d36aA370fDACe8d45839bF975F48f7AEa1',\n        FAUCET: '0x600103d518cC5E8f3319D532eB4e5C268D32e604',\n      },\n    },\n    polygon: {\n      proto: {\n        LENDING_POOL: '0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf',\n        WETH_GATEWAY: '0xbEadf48d62aCC944a06EEaE0A9054A90E5A7dc97',\n        SWAP_COLLATERAL_ADAPTER: '0x35784a624D4FfBC3594f4d16fA3801FeF063241c',\n      },\n    },\n    mumbai: {\n      proto: {\n        LENDING_POOL: '0x9198F13B08E299d85E096929fA9781A1E3d5d827',\n        WETH_GATEWAY: '0xee9eE614Ad26963bEc1Bec0D2c92879ae1F209fA',\n        FAUCET: '0x0b3C23243106A69449e79C14c58BB49E358f9B10',\n      },\n    },\n  },\n  staking: {\n    mainnet: {\n      aave: {\n        TOKEN_STAKING: '0x4da27a545c0c5b758a6ba100e3a049001de870f5',\n        STAKING_REWARD_TOKEN: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',\n        STAKING_HELPER: '0xce0424653fb2fd48ed1b621bdbd60db16b2e388a',\n      },\n      balancer: {\n        TOKEN_STAKING: '0xa1116930326D21fB917d5A27F1E9943A9595fb47',\n        STAKING_REWARD_TOKEN: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',\n      },\n    },\n    kovan: {\n      aave: {\n        TOKEN_STAKING: '0xf2fbf9A6710AfDa1c4AaB2E922DE9D69E0C97fd2',\n        STAKING_REWARD_TOKEN: '0xb597cd8d3217ea6477232f9217fa70837ff667af',\n        STAKING_HELPER: '0xf267aCc8BF1D8b41c89b6dc1a0aD8439dfbc890c',\n      },\n      balancer: {\n        TOKEN_STAKING: '0x31ce45Ab6E26C72c47C52c27498D460099545ef2',\n        STAKING_REWARD_TOKEN: '0xb597cd8d3217ea6477232f9217fa70837ff667af',\n      },\n    },\n  },\n  incentives: {\n    mainnet: {\n      INCENTIVES_CONTROLLER: '0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5',\n      INCENTIVES_CONTROLLER_REWARD_TOKEN:\n        '0x4da27a545c0c5b758a6ba100e3a049001de870f5',\n    },\n    polygon: {\n      INCENTIVES_CONTROLLER: '0x357d51124f59836ded84c8a1730d72b749d8bc23',\n      INCENTIVES_CONTROLLER_REWARD_TOKEN:\n        '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    },\n    mumbai: {\n      INCENTIVES_CONTROLLER: '0xd41aE58e803Edf4304334acCE4DC4Ec34a63C644',\n      INCENTIVES_CONTROLLER_REWARD_TOKEN:\n        '0x9c3c9283d3e44854697cd22d3faa240cfb032889',\n    },\n  },\n  migrator: {\n    mainnet: {\n      LEND_TO_AAVE_MIGRATOR: '0x317625234562b1526ea2fac4030ea499c5291de4',\n    },\n    kovan: {\n      LEND_TO_AAVE_MIGRATOR: '0x8cC8965FEf45a448bdbe3C749683b280eF2E17Ea',\n    },\n  },\n};\n","import { ethers, providers } from 'ethers';\nimport FaucetInterface from './interfaces/Faucet';\nimport IERC20ServiceInterface from './interfaces/ERC20';\nimport LTAMigratorInterface from './interfaces/LTAMigrator';\nimport StakingInterface from './interfaces/Staking';\nimport SynthetixInterface from './interfaces/Synthetix';\nimport ERC20Service from './services/ERC20';\nimport FaucetService from './services/Faucet';\nimport LTAMigratorService from './services/LTAMigrator';\nimport StakingService from './services/Staking';\nimport SynthetixService from './services/SynthetixService';\nimport {\n  ChainId,\n  Configuration,\n  DefaultProviderKeys,\n  Network,\n  TxBuilderConfig,\n} from './types';\nimport IncentivesController, {\n  IncentivesControllerInterface,\n} from './services/IncentivesController';\nimport { defaultConfig } from './config/defaultConfig';\n\nexport default class BaseTxBuilder {\n  readonly configuration: Configuration;\n\n  public erc20Service: IERC20ServiceInterface;\n\n  public synthetixService: SynthetixInterface;\n\n  public ltaMigratorService: LTAMigratorInterface;\n\n  public incentiveService: IncentivesControllerInterface;\n\n  readonly stakings: { [stake: string]: StakingInterface };\n\n  readonly faucets: { [market: string]: FaucetInterface };\n\n  readonly txBuilderConfig: TxBuilderConfig;\n\n  constructor(\n    network: Network = Network.mainnet,\n    injectedProvider?: providers.Provider | string | undefined,\n    defaultProviderKeys?: DefaultProviderKeys,\n    config: TxBuilderConfig = defaultConfig\n  ) {\n    this.txBuilderConfig = config;\n    let provider: providers.Provider;\n    // TODO: this is probably not enough as we use network down the road\n    const chainId = ChainId[network];\n\n    if (!injectedProvider) {\n      if (defaultProviderKeys && Object.keys(defaultProviderKeys).length > 1) {\n        provider = ethers.getDefaultProvider(network, defaultProviderKeys);\n      } else {\n        provider = ethers.getDefaultProvider(network);\n        console.log(\n          `These API keys are a provided as a community resource by the backend services for low-traffic projects and for early prototyping.\n          It is highly recommended to use own keys: https://docs.ethers.io/v5/api-keys/`\n        );\n      }\n    } else if (typeof injectedProvider === 'string') {\n      provider = new providers.StaticJsonRpcProvider(injectedProvider, chainId);\n    } else if (injectedProvider instanceof providers.Provider) {\n      provider = injectedProvider;\n    } else {\n      provider = new providers.Web3Provider(injectedProvider, chainId);\n    }\n\n    this.configuration = { network, provider };\n\n    this.erc20Service = new ERC20Service(this.configuration);\n    this.synthetixService = new SynthetixService(this.configuration);\n\n    this.ltaMigratorService = new LTAMigratorService(\n      this.configuration,\n      this.erc20Service,\n      this.txBuilderConfig.migrator?.[network]\n    );\n\n    this.incentiveService = new IncentivesController(\n      this.configuration,\n      this.txBuilderConfig.incentives?.[network]\n    );\n\n    this.stakings = {};\n    this.faucets = {};\n  }\n\n  public getFaucet = (market: string): FaucetInterface => {\n    if (!this.faucets[market]) {\n      const { network } = this.configuration;\n      this.faucets[market] = new FaucetService(\n        this.configuration,\n        this.txBuilderConfig.lendingPool?.[network]?.[market]\n      );\n    }\n    return this.faucets[market];\n  };\n\n  public getStaking = (stake: string): StakingInterface => {\n    if (!this.stakings[stake]) {\n      const { network } = this.configuration;\n      const stakingConfig = this.txBuilderConfig.staking?.[network]?.[stake];\n\n      this.stakings[stake] = new StakingService(\n        this.configuration,\n        this.erc20Service,\n        stake,\n        stakingConfig\n      );\n    }\n    return this.stakings[stake];\n  };\n}\n","import { constants } from 'ethers';\nimport { IWETHGateway, IWETHGateway__factory } from '../contract-types';\nimport BaseDebtTokenInterface from '../interfaces/BaseDebtToken';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport WETHGatewayInterface from '../interfaces/WETHGateway';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  InterestRate,\n  LendingPoolMarketConfig,\n  ProtocolAction,\n  transactionType,\n  tStringDecimalUnits,\n} from '../types';\nimport {\n  WETHBorrowParamsType,\n  WETHDepositParamsType,\n  WETHRepayParamsType,\n  WETHWithdrawParamsType,\n} from '../types/WethGatewayMethodTypes';\nimport { parseNumber } from '../utils/parsings';\nimport { WETHValidator } from '../validators/methodValidators';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n} from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class WETHGatewayService\n  extends BaseService<IWETHGateway>\n  implements WETHGatewayInterface {\n  readonly wethGatewayAddress: string;\n\n  readonly config: Configuration;\n\n  readonly baseDebtTokenService: BaseDebtTokenInterface;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly wethGatewayConfig: LendingPoolMarketConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    baseDebtTokenService: BaseDebtTokenInterface,\n    erc20Service: IERC20ServiceInterface,\n    wethGatewayConfig: LendingPoolMarketConfig | undefined\n  ) {\n    super(config, IWETHGateway__factory);\n    this.wethGatewayConfig = wethGatewayConfig;\n    this.baseDebtTokenService = baseDebtTokenService;\n    this.erc20Service = erc20Service;\n\n    this.wethGatewayAddress = this.wethGatewayConfig?.WETH_GATEWAY || '';\n  }\n\n  @WETHValidator\n  public async depositETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('amount')\n    {\n      lendingPool,\n      user,\n      amount,\n      onBehalfOf,\n      referralCode,\n    }: WETHDepositParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.depositETH(\n          lendingPool,\n          onBehalfOf || user,\n          referralCode || '0'\n        ),\n      from: user,\n      value: convertedAmount,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @WETHValidator\n  public async borrowETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('debtTokenAddress')\n    {\n      lendingPool,\n      user,\n      amount,\n      debtTokenAddress,\n      interestRateMode,\n      referralCode,\n    }: WETHBorrowParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const delegationApproved: boolean = await this.baseDebtTokenService.isDelegationApproved(\n      debtTokenAddress,\n      user,\n      this.wethGatewayAddress,\n      amount\n    );\n\n    if (!delegationApproved) {\n      const approveDelegationTx: EthereumTransactionTypeExtended = this.baseDebtTokenService.approveDelegation(\n        user,\n        this.wethGatewayAddress,\n        debtTokenAddress,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveDelegationTx);\n    }\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.borrowETH(\n          lendingPool,\n          convertedAmount,\n          numericRateMode,\n          referralCode || '0'\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.borrowETH\n      ),\n    });\n\n    return txs;\n  }\n\n  @WETHValidator\n  public async withdrawETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('aTokenAddress')\n    {\n      lendingPool,\n      user,\n      amount,\n      onBehalfOf,\n      aTokenAddress,\n    }: WETHWithdrawParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { isApproved, approve }: IERC20ServiceInterface = this.erc20Service;\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, 18);\n\n    const approved: boolean = await isApproved(\n      aTokenAddress,\n      user,\n      this.wethGatewayAddress,\n      amount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        aTokenAddress,\n        this.wethGatewayAddress,\n        constants.MaxUint256.toString()\n      );\n      txs.push(approveTx);\n    }\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.withdrawETH(\n          lendingPool,\n          convertedAmount,\n          onBehalfOf || user\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.withdrawETH\n      ),\n    });\n\n    return txs;\n  }\n\n  @WETHValidator\n  public async repayETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('amount')\n    {\n      lendingPool,\n      user,\n      amount,\n      interestRateMode,\n      onBehalfOf,\n    }: WETHRepayParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.repayETH(\n          lendingPool,\n          convertedAmount,\n          numericRateMode,\n          onBehalfOf || user\n        ),\n      gasSurplus: 30,\n      from: user,\n      value: convertedAmount,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { BytesLike } from 'ethers';\nimport { tEthereumAddress } from '.';\n\nexport enum ExecutorType {\n  Short,\n  Long,\n}\n\nexport type GovCreateType = {\n  user: tEthereumAddress;\n  targets: tEthereumAddress[];\n  values: string[];\n  signatures: string[];\n  calldatas: BytesLike[];\n  withDelegateCalls: boolean[];\n  ipfsHash: BytesLike;\n  executor: ExecutorType;\n};\nexport type GovCancelType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovQueueType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovExecuteType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovSubmitVoteType = {\n  user: tEthereumAddress;\n  proposalId: number;\n  support: boolean;\n};\nexport type GovSubmitVoteSignType = {\n  user: tEthereumAddress;\n  proposalId: number;\n  support: boolean;\n  signature: string;\n};\n\nexport type GovSignVotingType = {\n  user: tEthereumAddress;\n  support: boolean;\n  proposalId: number;\n  nonce: number;\n};\n\nexport type GovGetProposalsType = {\n  skip: number;\n  limit: number;\n};\n\nexport type GovGetProposalType = {\n  proposalId: number;\n};\n\nexport type GovGetVotingSupplyType = {\n  block: number;\n  strategy: tEthereumAddress;\n};\n\nexport type GovGetVotingAtBlockType = {\n  user: tEthereumAddress;\n  strategy: tEthereumAddress;\n  block: number;\n};\n\nexport type GovGetTokensVotingPower = {\n  user: tEthereumAddress;\n  tokens: tEthereumAddress[];\n};\n\nexport type GovGetVoteOnProposal = {\n  proposalId: string;\n  user: tEthereumAddress;\n};\n","import { BigNumber } from 'ethers';\nimport { tEthereumAddress } from '.';\n\nexport enum ProposalState {\n  Pending = 'Pending',\n  Canceled = 'Canceled',\n  Active = 'Active',\n  Failed = 'Failed',\n  Succeeded = 'Succeeded',\n  Queued = 'Queued',\n  Expired = 'Expired',\n  Executed = 'Executed',\n}\n\nexport type Proposal = {\n  id: number;\n  title: string;\n  description: string;\n  shortDescription: string;\n  creator: tEthereumAddress;\n  executor: tEthereumAddress;\n  targets: tEthereumAddress[];\n  values: BigNumber[];\n  signatures: string[];\n  calldatas: string[];\n  withDelegatecalls: boolean[];\n  startBlock: number;\n  endBlock: number;\n  executionTime: string;\n  executionTimeWithGracePeriod: string;\n  forVotes: string;\n  againstVotes: string;\n  executed: boolean;\n  canceled: boolean;\n  strategy: string;\n  ipfsHash: string;\n  state: ProposalState;\n  minimumQuorum: string;\n  minimumDiff: string;\n  proposalCreated: number;\n  totalVotingSupply: string;\n};\n\nexport type ProposalRPC = {\n  totalVotingSupply: BigNumber;\n  minimumQuorum: BigNumber;\n  minimumDiff: BigNumber;\n  executionTimeWithGracePeriod: BigNumber;\n  proposalCreated: BigNumber;\n  id: BigNumber;\n  creator: string;\n  executor: string;\n  targets: string[];\n  values: BigNumber[];\n  signatures: string[];\n  calldatas: string[];\n  withDelegatecalls: boolean[];\n  startBlock: BigNumber;\n  endBlock: BigNumber;\n  executionTime: BigNumber;\n  forVotes: BigNumber;\n  againstVotes: BigNumber;\n  executed: boolean;\n  canceled: boolean;\n  strategy: string;\n  ipfsHash: string;\n  proposalState: number;\n};\n\nexport type ProposalMetadata = {\n  title: string;\n  description: string;\n  shortDescription: string;\n  ipfsHash: string;\n};\n\nexport type Power = {\n  votingPower: BigNumber;\n  delegatedAddressVotingPower: string;\n  propositionPower: BigNumber;\n  delegatedAddressPropositionPower: string;\n};\n\nexport type Vote = { support: boolean; votingPower: BigNumber };\n","import { BigNumber } from 'ethers';\nimport { IDebtTokenBase, IDebtTokenBase__factory } from '../contract-types';\nimport BaseDebtTokenInterface from '../interfaces/BaseDebtToken';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport BaseService from './BaseService';\n\nexport default class BaseDebtToken\n  extends BaseService<IDebtTokenBase>\n  implements BaseDebtTokenInterface {\n  readonly erc20Service: IERC20ServiceInterface;\n\n  constructor(config: Configuration, erc20Service: IERC20ServiceInterface) {\n    super(config, IDebtTokenBase__factory);\n    this.erc20Service = erc20Service;\n  }\n\n  public approveDelegation(\n    user: tEthereumAddress,\n    delegatee: tEthereumAddress,\n    debtTokenAddress: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): EthereumTransactionTypeExtended {\n    const debtTokenContract: IDebtTokenBase = this.getContractInstance(\n      debtTokenAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        debtTokenContract.populateTransaction.approveDelegation(\n          delegatee,\n          amount\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.ERC20_APPROVAL,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n\n  public async isDelegationApproved(\n    debtTokenAddress: tEthereumAddress,\n    allowanceGiver: tEthereumAddress,\n    allowanceReceiver: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<boolean> {\n    const decimals: number = await this.erc20Service.decimalsOf(\n      debtTokenAddress\n    );\n    const debtTokenContract: IDebtTokenBase = this.getContractInstance(\n      debtTokenAddress\n    );\n    const delegatedAllowance: BigNumber = await debtTokenContract.borrowAllowance(\n      allowanceGiver,\n      allowanceReceiver\n    );\n    const amountBNWithDecimals: BigNumber = BigNumber.from(\n      parseNumber(amount, decimals)\n    );\n\n    return delegatedAllowance.gt(amountBNWithDecimals);\n  }\n}\n","import {\n  IRepayWithCollateral,\n  IRepayWithCollateral__factory,\n} from '../contract-types';\nimport RepayWithCollateralAdapterInterface from '../interfaces/RepayWithCollateralAdapter';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  LendingPoolMarketConfig,\n  ProtocolAction,\n  transactionType,\n} from '../types';\nimport { RepayWithCollateralType } from '../types/RepayWithCollateralMethodTypes';\nimport { RepayWithCollateralValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class RepayWithCollateralAdapterService\n  extends BaseService<IRepayWithCollateral>\n  implements RepayWithCollateralAdapterInterface {\n  readonly repayWithCollateralAddress: string;\n\n  readonly repayWithCollateralConfig: LendingPoolMarketConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    repayWithCollateralConfig: LendingPoolMarketConfig | undefined\n  ) {\n    super(config, IRepayWithCollateral__factory);\n    this.repayWithCollateralConfig = repayWithCollateralConfig;\n\n    this.repayWithCollateralAddress =\n      this.repayWithCollateralConfig?.REPAY_WITH_COLLATERAL_ADAPTER || '';\n  }\n\n  @RepayWithCollateralValidator\n  public swapAndRepay(\n    @IsEthAddress('user')\n    @IsEthAddress('collateralAsset')\n    @IsEthAddress('debtAsset')\n    @IsPositiveAmount('collateralAmount')\n    @IsPositiveAmount('debtRepayAmount')\n    {\n      user,\n      collateralAsset,\n      debtAsset,\n      collateralAmount,\n      debtRepayAmount,\n      debtRateMode,\n      permit,\n      useEthPath,\n    }: RepayWithCollateralType,\n    txs?: EthereumTransactionTypeExtended[]\n  ): EthereumTransactionTypeExtended {\n    const repayWithCollateralContract: IRepayWithCollateral = this.getContractInstance(\n      this.repayWithCollateralAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        repayWithCollateralContract.populateTransaction.swapAndRepay(\n          collateralAsset,\n          debtAsset,\n          collateralAmount,\n          debtRepayAmount,\n          debtRateMode,\n          permit,\n          useEthPath || false\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs || [],\n        txCallback,\n        ProtocolAction.repayCollateral\n      ),\n    };\n  }\n}\n","import axios from 'axios';\nimport { base58 } from 'ethers/lib/utils';\nimport { ProposalMetadata } from '../types/GovernanceV2ReturnTypes';\n\nconst ipfsEndpoint = 'https://cloudflare-ipfs.com/ipfs';\n\nexport function getLink(hash: string): string {\n  return `${ipfsEndpoint}/${hash}`;\n}\n\ninterface MemorizeMetadata {\n  [key: string]: ProposalMetadata;\n}\n\nconst MEMORIZE: MemorizeMetadata = {};\n\nexport async function getProposalMetadata(\n  hash: string\n): Promise<ProposalMetadata> {\n  const ipfsHash = base58.encode(Buffer.from(`1220${hash.slice(2)}`, 'hex'));\n  if (MEMORIZE[ipfsHash]) return MEMORIZE[ipfsHash];\n  try {\n    const { data } = await axios.get(getLink(ipfsHash), { timeout: 2000 });\n\n    if (!data?.title) {\n      throw Error('Missing title field at proposal metadata.');\n    }\n    if (!data?.description) {\n      throw Error('Missing description field at proposal metadata.');\n    }\n    if (!data?.shortDescription) {\n      throw Error('Missing shortDescription field at proposal metadata.');\n    }\n\n    MEMORIZE[ipfsHash] = {\n      ipfsHash,\n      title: data.title,\n      description: data.description,\n      shortDescription: data.shortDescription,\n    };\n    return MEMORIZE[ipfsHash];\n  } catch (e) {\n    console.error(`@aave/protocol-js: IPFS fetch Error: ${e.message}`);\n    return {\n      ipfsHash,\n      title: `Proposal - ${ipfsHash}`,\n      description: `Proposal with invalid metadata format or IPFS gateway is down`,\n      shortDescription: `Proposal with invalid metadata format or IPFS gateway is down`,\n    };\n  }\n}\n","import { Signature, utils } from 'ethers';\nimport { formatEther } from 'ethers/lib/utils';\nimport {\n  IGovernanceStrategy,\n  IGovernanceStrategy__factory,\n  IGovernanceV2Helper,\n  IGovernanceV2Helper__factory,\n} from '../../contract-types';\nimport { IAaveGovernanceV2__factory } from '../../contract-types/factories/IAaveGovernanceV2__factory';\nimport { IAaveGovernanceV2 } from '../../contract-types/IAaveGovernanceV2';\nimport AaveGovernanceV2Interface from '../../interfaces/v2/AaveGovernanceV2';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  GovernanceConfig,\n  tEthereumAddress,\n  transactionType,\n} from '../../types';\nimport {\n  ExecutorType,\n  GovCancelType,\n  GovCreateType,\n  GovExecuteType,\n  GovGetProposalsType,\n  GovGetProposalType,\n  GovGetVotingAtBlockType,\n  GovGetVotingSupplyType,\n  GovQueueType,\n  GovSignVotingType,\n  GovSubmitVoteSignType,\n  GovSubmitVoteType,\n  GovGetTokensVotingPower as GovGetPower,\n  GovGetVoteOnProposal,\n} from '../../types/GovernanceV2MethodTypes';\nimport {\n  Proposal,\n  ProposalState,\n  Power,\n  ProposalRPC,\n  Vote,\n} from '../../types/GovernanceV2ReturnTypes';\nimport { getProposalMetadata } from '../../utils/ipfs';\nimport { GovValidator } from '../../validators/methodValidators';\nimport {\n  Is0OrPositiveAmount,\n  IsEthAddress,\n} from '../../validators/paramValidators';\nimport BaseService from '../BaseService';\n\nconst parseProposal = async (rawProposal: ProposalRPC): Promise<Proposal> => {\n  const {\n    id,\n    creator,\n    executor,\n    targets,\n    values,\n    signatures,\n    calldatas,\n    withDelegatecalls,\n    startBlock,\n    endBlock,\n    executionTime,\n    forVotes,\n    againstVotes,\n    executed,\n    canceled,\n    strategy,\n    ipfsHash: ipfsHex,\n    totalVotingSupply,\n    minimumQuorum,\n    minimumDiff,\n    executionTimeWithGracePeriod,\n    proposalCreated,\n    proposalState,\n  } = rawProposal;\n\n  const proposalMetadata = await getProposalMetadata(ipfsHex);\n  const proposal: Proposal = {\n    id: Number(id.toString()),\n    creator,\n    executor,\n    targets,\n    values,\n    signatures,\n    calldatas,\n    withDelegatecalls,\n    startBlock: Number(startBlock.toString()),\n    endBlock: Number(endBlock.toString()),\n    executionTime: executionTime.toString(),\n    forVotes: forVotes.toString(),\n    againstVotes: againstVotes.toString(),\n    executed,\n    canceled,\n    strategy,\n    ipfsHash: proposalMetadata.ipfsHash,\n    state: Object.values(ProposalState)[proposalState],\n    minimumQuorum: minimumQuorum.toString(),\n    minimumDiff: minimumDiff.toString(),\n    executionTimeWithGracePeriod: executionTimeWithGracePeriod.toString(),\n    title: proposalMetadata.title,\n    description: proposalMetadata.description,\n    shortDescription: proposalMetadata.shortDescription,\n    proposalCreated: Number(proposalCreated.toString()),\n    totalVotingSupply: totalVotingSupply.toString(),\n  };\n\n  return proposal;\n};\nexport default class AaveGovernanceV2Service\n  extends BaseService<IAaveGovernanceV2>\n  implements AaveGovernanceV2Interface {\n  readonly aaveGovernanceV2Address: string;\n\n  readonly aaveGovernanceV2HelperAddress: string;\n\n  readonly executors: tEthereumAddress[] = [];\n\n  readonly governanceConfig: GovernanceConfig | undefined;\n\n  constructor(\n    config: Configuration,\n    governanceConfig: GovernanceConfig | undefined\n  ) {\n    super(config, IAaveGovernanceV2__factory);\n    this.governanceConfig = governanceConfig;\n\n    const {\n      AAVE_GOVERNANCE_V2,\n      AAVE_GOVERNANCE_V2_HELPER,\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT,\n      AAVE_GOVERNANCE_V2_EXECUTOR_LONG,\n    } = this.governanceConfig || {};\n\n    this.aaveGovernanceV2Address = AAVE_GOVERNANCE_V2 || '';\n    this.aaveGovernanceV2HelperAddress = AAVE_GOVERNANCE_V2_HELPER || '';\n    this.executors[ExecutorType.Short] =\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT || '';\n    this.executors[ExecutorType.Long] = AAVE_GOVERNANCE_V2_EXECUTOR_LONG || '';\n  }\n\n  @GovValidator\n  public async create(\n    @IsEthAddress('user')\n    {\n      user,\n      targets,\n      values,\n      signatures,\n      calldatas,\n      withDelegateCalls,\n      ipfsHash,\n      executor,\n    }: GovCreateType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.create(\n          this.executors[executor],\n          targets,\n          values,\n          signatures,\n          calldatas,\n          withDelegateCalls,\n          ipfsHash\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async cancel(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovCancelType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.cancel(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async queue(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovQueueType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.queue(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async execute(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovExecuteType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.execute(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async submitVote(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId, support }: GovSubmitVoteType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.submitVote(proposalId, support),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async signVoting(\n    @Is0OrPositiveAmount('proposalId')\n    { support, proposalId }: GovSignVotingType\n  ): Promise<string> {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        VoteEmitted: [\n          { name: 'id', type: 'uint256' },\n          { name: 'support', type: 'bool' },\n        ],\n      },\n      primaryType: 'VoteEmitted' as const,\n      domain: {\n        name: 'Aave Governance v2',\n        chainId: ChainId[this.config.network],\n        verifyingContract: this.aaveGovernanceV2Address,\n      },\n      message: {\n        support,\n        id: proposalId,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovValidator\n  public async submitVoteBySignature(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId, support, signature }: GovSubmitVoteSignType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const sig: Signature = utils.splitSignature(signature);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.submitVoteBySignature(\n          proposalId,\n          support,\n          sig.v,\n          sig.r,\n          sig.s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async getProposals({\n    skip,\n    limit,\n  }: GovGetProposalsType): Promise<Proposal[]> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n\n    const result = await helper.getProposals(\n      skip.toString(),\n      limit.toString(),\n      this.aaveGovernanceV2Address\n    );\n\n    const proposals: Promise<Proposal[]> = Promise.all(\n      result.map(\n        async (rawProposal: ProposalRPC): Promise<Proposal> =>\n          parseProposal(rawProposal)\n      )\n    );\n\n    return proposals;\n  }\n\n  @GovValidator\n  public async getProposal({\n    proposalId,\n  }: GovGetProposalType): Promise<Proposal> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n\n    const proposal = await helper.getProposal(\n      proposalId,\n      this.aaveGovernanceV2Address\n    );\n\n    return parseProposal(proposal);\n  }\n\n  @GovValidator\n  public async getPropositionPowerAt({\n    user,\n    block,\n    strategy,\n  }: GovGetVotingAtBlockType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const power = await proposalStrategy.getPropositionPowerAt(\n      user,\n      block.toString()\n    );\n    return formatEther(power);\n  }\n\n  @GovValidator\n  public async getVotingPowerAt({\n    user,\n    block,\n    strategy,\n  }: GovGetVotingAtBlockType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const power = await proposalStrategy.getVotingPowerAt(\n      user,\n      block.toString()\n    );\n    return formatEther(power);\n  }\n\n  @GovValidator\n  public async getTotalPropositionSupplyAt({\n    block,\n    strategy,\n  }: GovGetVotingSupplyType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const total = await proposalStrategy.getTotalPropositionSupplyAt(\n      block.toString()\n    );\n    return formatEther(total);\n  }\n\n  @GovValidator\n  public async getTotalVotingSupplyAt({\n    block,\n    strategy,\n  }: GovGetVotingSupplyType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const total = await proposalStrategy.getTotalVotingSupplyAt(\n      block.toString()\n    );\n    return formatEther(total);\n  }\n\n  @GovValidator\n  public async getTokensPower({ user, tokens }: GovGetPower): Promise<Power[]> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n    const power = helper.getTokensPower(user, tokens);\n    return power as Promise<Power[]>;\n  }\n\n  @GovValidator\n  public async getVoteOnProposal({\n    proposalId,\n    user,\n  }: GovGetVoteOnProposal): Promise<Vote> {\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n    return govContract.getVoteOnProposal(proposalId, user) as Promise<Vote>;\n  }\n}\n","import { splitSignature } from 'ethers/lib/utils';\nimport {\n  IGovernancePowerDelegationToken,\n  IGovernancePowerDelegationToken__factory,\n} from '../../contract-types';\nimport GovernanceDelegationTokenInterface from '../../interfaces/v2/GovernanceDelegationToken';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringDecimalUnits,\n} from '../../types';\nimport {\n  GovDelegate,\n  GovDelegateBySig,\n  GovDelegateByType,\n  GovDelegateByTypeBySig,\n  GovGetDelegateeByType,\n  GovGetNonce,\n  GovGetPowerAtBlock,\n  GovGetPowerCurrent,\n  GovPrepareDelegateSig,\n  GovPrepareDelegateSigByType,\n} from '../../types/GovDelegationMethodTypes';\nimport { canBeEnsAddress } from '../../utils/parsings';\nimport { GovDelegationValidator } from '../../validators/methodValidators';\nimport {\n  Is0OrPositiveAmount,\n  IsEthAddress,\n  IsEthAddressOrENS,\n  IsPositiveAmount,\n} from '../../validators/paramValidators';\nimport BaseService from '../BaseService';\n\nexport default class GovernanceDelegationTokenService\n  extends BaseService<IGovernancePowerDelegationToken>\n  implements GovernanceDelegationTokenInterface {\n  constructor(config: Configuration) {\n    super(config, IGovernancePowerDelegationToken__factory);\n  }\n\n  @GovDelegationValidator\n  public async delegate(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, governanceToken }: GovDelegate\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegate(\n          delegateeAddress\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateByType(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, delegationType, governanceToken }: GovDelegateByType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateByType(\n          delegateeAddress,\n          delegationType\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateBySig(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, expiry, signature, governanceToken }: GovDelegateBySig\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    const nonce = await this.getNonce({ user, governanceToken });\n    const { v, r, s } = splitSignature(signature);\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateBySig(\n          delegateeAddress,\n          nonce,\n          expiry,\n          v,\n          r,\n          s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateByTypeBySig(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    {\n      user,\n      delegatee,\n      delegationType,\n      expiry,\n      signature,\n      governanceToken,\n    }: GovDelegateByTypeBySig\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    const nonce = await this.getNonce({ user, governanceToken });\n    const { v, r, s } = splitSignature(signature);\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateByTypeBySig(\n          delegateeAddress,\n          delegationType,\n          nonce,\n          expiry,\n          v,\n          r,\n          s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async prepareDelegateSignature(\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    @Is0OrPositiveAmount('nonce')\n    {\n      delegatee,\n      nonce,\n      expiry,\n      governanceTokenName,\n      governanceToken,\n    }: GovPrepareDelegateSig\n  ): Promise<string> {\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        Delegate: [\n          { name: 'delegatee', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'expiry', type: 'uint256' },\n        ],\n      },\n      primaryType: 'Delegate' as const,\n      domain: {\n        name: governanceTokenName,\n        chainId: ChainId[this.config.network],\n        verifyingContract: governanceToken,\n      },\n      message: {\n        delegatee: delegateeAddress,\n        nonce,\n        expiry,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovDelegationValidator\n  public async prepareDelegateByTypeSignature(\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    @Is0OrPositiveAmount('nonce')\n    {\n      delegatee,\n      type,\n      nonce,\n      expiry,\n      governanceTokenName,\n      governanceToken,\n    }: GovPrepareDelegateSigByType\n  ): Promise<string> {\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        DelegateByType: [\n          { name: 'delegatee', type: 'address' },\n          { name: 'type', type: 'uint256' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'expiry', type: 'uint256' },\n        ],\n      },\n      primaryType: 'DelegateByType' as const,\n      domain: {\n        name: governanceTokenName,\n        chainId: ChainId[this.config.network],\n        verifyingContract: governanceToken,\n      },\n      message: {\n        delegatee: delegateeAddress,\n        type,\n        nonce,\n        expiry,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovDelegationValidator\n  public async getDelegateeByType(\n    @IsEthAddress('delegator')\n    @IsEthAddress('governanceToken')\n    { delegator, delegationType, governanceToken }: GovGetDelegateeByType\n  ): Promise<tEthereumAddress> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return governanceDelegationToken.getDelegateeByType(\n      delegator,\n      delegationType\n    );\n  }\n\n  @GovDelegationValidator\n  public async getPowerCurrent(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    { user, delegationType, governanceToken }: GovGetPowerCurrent\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return (\n      await governanceDelegationToken.getPowerCurrent(user, delegationType)\n    ).toString();\n  }\n\n  @GovDelegationValidator\n  public async getPowerAtBlock(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    @IsPositiveAmount('blockNumber')\n    { user, blockNumber, delegationType, governanceToken }: GovGetPowerAtBlock\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return (\n      await governanceDelegationToken.getPowerAtBlock(\n        user,\n        blockNumber,\n        delegationType\n      )\n    ).toString();\n  }\n\n  @GovDelegationValidator\n  public async getNonce(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    { user, governanceToken }: GovGetNonce\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    // eslint-disable-next-line no-underscore-dangle\n    return (await governanceDelegationToken._nonces(user)).toString();\n  }\n\n  private async getDelegateeAddress(delegatee: string): Promise<string> {\n    if (canBeEnsAddress(delegatee)) {\n      const delegateeAddress = await this.config.provider.resolveName(\n        delegatee\n      );\n      if (!delegateeAddress)\n        throw new Error(`Address ${delegatee} is not a valid ENS address`);\n\n      return delegateeAddress;\n    }\n\n    return delegatee;\n  }\n}\n","import { providers } from 'ethers';\nimport { Network, DefaultProviderKeys, TxBuilderConfig } from './types';\nimport TxBuilderInterface from './interfaces/TxBuilder';\nimport LendingPoolInterface from './interfaces/v2/LendingPool';\nimport LendingPool from './services/v2/LendingPool';\nimport BaseTxBuilder from './txBuilder';\nimport WETHGatewayInterface from './interfaces/WETHGateway';\nimport WETHGatewayService from './services/WETHGateway';\nimport BaseDebtTokenInterface from './interfaces/BaseDebtToken';\nimport BaseDebtToken from './services/BaseDebtToken';\nimport LiquiditySwapAdapterService from './services/LiquiditySwapAdapterParaswap';\nimport LiquiditySwapAdapterInterface from './interfaces/LiquiditySwapAdapterParaswap';\nimport RepayWithCollateralAdapterService from './services/RepayWithCollateralAdapter';\nimport RepayWithCollateralAdapterInterface from './interfaces/RepayWithCollateralAdapter';\nimport AaveGovernanceV2Interface from './interfaces/v2/AaveGovernanceV2';\nimport GovernanceDelegationTokenInterface from './interfaces/v2/GovernanceDelegationToken';\nimport AaveGovernanceV2Service from './services/v2/AaveGovernanceV2';\nimport GovernanceDelegationTokenService from './services/v2/GovernanceDelegationTokenService';\n\nexport default class TxBuilder\n  extends BaseTxBuilder\n  implements TxBuilderInterface {\n  readonly lendingPools: {\n    [market: string]: LendingPoolInterface;\n  };\n\n  readonly wethGateways: {\n    [market: string]: WETHGatewayInterface;\n  };\n\n  readonly swapCollateralAdapters: {\n    [market: string]: LiquiditySwapAdapterInterface;\n  };\n\n  readonly repayWithCollateralAdapters: {\n    [market: string]: RepayWithCollateralAdapterInterface;\n  };\n\n  readonly baseDebtTokenService: BaseDebtTokenInterface;\n\n  public aaveGovernanceV2Service: AaveGovernanceV2Interface;\n\n  public governanceDelegationTokenService: GovernanceDelegationTokenInterface;\n\n  constructor(\n    network: Network = Network.mainnet,\n    injectedProvider?: providers.Provider | string | undefined,\n    defaultProviderKeys?: DefaultProviderKeys,\n    config?: TxBuilderConfig\n  ) {\n    super(network, injectedProvider, defaultProviderKeys, config);\n\n    this.wethGateways = {};\n    this.lendingPools = {};\n    this.swapCollateralAdapters = {};\n    this.repayWithCollateralAdapters = {};\n    this.baseDebtTokenService = new BaseDebtToken(\n      this.configuration,\n      this.erc20Service\n    );\n\n    this.aaveGovernanceV2Service = new AaveGovernanceV2Service(\n      this.configuration,\n      this.txBuilderConfig.governance?.[network]\n    );\n\n    this.governanceDelegationTokenService = new GovernanceDelegationTokenService(\n      this.configuration\n    );\n  }\n\n  public getRepayWithCollateralAdapter = (\n    market: string\n  ): RepayWithCollateralAdapterInterface => {\n    const { network } = this.configuration;\n\n    if (!this.repayWithCollateralAdapters[market]) {\n      this.repayWithCollateralAdapters[\n        market\n      ] = new RepayWithCollateralAdapterService(\n        this.configuration,\n        this.txBuilderConfig.lendingPool?.[network]?.[market]\n      );\n    }\n\n    return this.repayWithCollateralAdapters[market];\n  };\n\n  public getSwapCollateralAdapter = (\n    market: string\n  ): LiquiditySwapAdapterInterface => {\n    const { network } = this.configuration;\n\n    if (!this.swapCollateralAdapters[market]) {\n      this.swapCollateralAdapters[market] = new LiquiditySwapAdapterService(\n        this.configuration,\n        this.txBuilderConfig.lendingPool?.[network]?.[market]\n      );\n    }\n\n    return this.swapCollateralAdapters[market];\n  };\n\n  public getWethGateway = (market: string): WETHGatewayInterface => {\n    const { network } = this.configuration;\n    if (!this.wethGateways[market]) {\n      this.wethGateways[market] = new WETHGatewayService(\n        this.configuration,\n        this.baseDebtTokenService,\n        this.erc20Service,\n        this.txBuilderConfig.lendingPool?.[network]?.[market]\n      );\n    }\n\n    return this.wethGateways[market];\n  };\n\n  public getLendingPool = (market: string): LendingPoolInterface => {\n    const { network } = this.configuration;\n    if (!this.lendingPools[market]) {\n      this.lendingPools[market] = new LendingPool(\n        this.configuration,\n        this.erc20Service,\n        this.synthetixService,\n        this.getWethGateway(market),\n        this.getSwapCollateralAdapter(market),\n        this.getRepayWithCollateralAdapter(market),\n        market,\n        this.txBuilderConfig.lendingPool?.[network]?.[market]\n      );\n    }\n\n    return this.lendingPools[market];\n  };\n}\n"],"names":["BigNumberZD","BigNumber","clone","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","valueToBigNumber","amount","valueToZDBigNumber","bn10","bn10PowLookup","pow10","decimals","pow","normalize","n","normalizeBN","toString","dividedBy","BorrowRateMode","WAD","HALF_WAD","RAY","HALF_RAY","WAD_RAY_RATIO","rayMul","a","b","plus","multipliedBy","div","rayDiv","rayToWad","wadToRay","decimalPlaces","rayPow","p","x","z","modulo","eq","binomialApproximatedRayPow","base","exp","expMinusOne","minus","expMinusTwo","gt","basePowerTwo","basePowerThree","firstTerm","secondTerm","thirdTerm","SECONDS_PER_YEAR","calculateCompoundedInterest","rate","currentTimestamp","lastUpdateTimestamp","timeDelta","RayMath","getCompoundedBalance","_principalBalance","_reserveIndex","_reserveRate","_lastUpdateTimestamp","principalBalance","cumulatedInterest","calculateLinearInterest","getReserveNormalizedIncome","index","getLinearBalance","balance","getCompoundedStableBalance","_userStableRate","calculateHealthFactorFromBalances","collateralBalanceETH","borrowBalanceETH","currentLiquidationThreshold","calculateAvailableBorrowsETH","currentLtv","availableBorrowsETH","calculateAverageRate","index0","index1","timestamp0","timestamp1","getCompoundedBorrowBalance","reserve","userReserve","principalBorrows","borrowRateMode","Variable","variableBorrowRate","variableBorrowIndex","borrowRate","totalFeesETH","lt","borrowFee","calculateCumulatedBalance","poolReserve","liquidityRate","liquidityIndex","userBalanceIndex","calculateCurrentUnderlyingBalance","principalATokenBalance","redirectedBalance","interestRedirectionAddress","computeRawUserSummaryData","poolReservesData","rawUserReserves","userId","usdPriceEth","totalLiquidityETH","totalCollateralETH","totalBorrowsETH","userReservesData","map","find","id","Error","computedUserReserve","priceInEth","price","currentUnderlyingBalance","currentUnderlyingBalanceETH","currentUnderlyingBalanceUSD","toFixed","principalBorrowsETH","principalBorrowsUSD","currentBorrows","currentBorrowsETH","currentBorrowsUSD","originationFeeETH","originationFee","originationFeeUSD","computeUserReserveData","usageAsCollateralEnabled","usageAsCollateralEnabledOnUser","baseLTVasCollateral","reserveLiquidationThreshold","sort","symbol","healthFactor","totalCollateralUSD","totalLiquidityUSD","totalBorrowsUSD","totalFeesUSD","totalBorrowsWithFeesETH","totalBorrowsWithFeesUSD","totalBorrowsAndFeesETH","maxAmountToWithdrawInEth","currentLoanToValue","reservesData","userData","reserveDecimals","reserveLiquidationBonus","reserves","reserveIndexes30DaysAgo","reserve30DaysAgo","res","_reserveIndexes30Days","paramsHistory","_reserveIndexes30Days2","avg30DaysVariableBorrowRate","timestamp","undefined","avg30DaysLiquidityRate","stableBorrowRate","totalLiquidity","availableLiquidity","totalBorrows","totalBorrowsVariable","totalBorrowsStable","amountToDeposit","amountToBorrow","borrowMode","optimalUtilisationRate","baseVariableBorrowRate","totalDeposits","utilizationRate","currentStableBorrowRate","currentVariableBorrowRate","currentLiquidityRate","excessUtilizationRateRatio","stableRateSlope1","stableRateSlope2","variableRateSlope1","variableRateSlope2","weightedVariableRate","weightedStableRate","averageStableBorrowRate","getEthAndUsdBalance","balanceInEth","balanceInUsd","rewardsInfo","underlyingBalance","scaledATokenBalance","underlyingBalanceETH","underlyingBalanceUSD","variableBorrows","scaledVariableDebt","variableBorrowsETH","variableBorrowsUSD","stableBorrows","principalStableDebt","stableBorrowLastUpdateTimestamp","stableBorrowsETH","stableBorrowsUSD","calculateSupplies","totalScaledVariableDebt","totalPrincipalStableDebt","averageStableRate","stableDebtLastUpdateTimestamp","totalStableDebt","totalVariableDebt","aTokenRewards","calculateRewards","aTokenIncentivesIndex","aTokenincentivesUserIndex","incentivePrecision","rewardTokenDecimals","aIncentivesLastUpdateTimestamp","aEmissionPerSecond","emissionEndTimestamp","rewardTokenPriceEth","aTokenRewardsETH","aTokenRewardsUSD","vTokenRewards","vTokenIncentivesIndex","vTokenincentivesUserIndex","vIncentivesLastUpdateTimestamp","vEmissionPerSecond","vTokenRewardsETH","vTokenRewardsUSD","sTokenRewards","sTokenIncentivesIndex","sTokenincentivesUserIndex","sIncentivesLastUpdateTimestamp","sEmissionPerSecond","sTokenRewardsETH","sTokenRewardsUSD","exactStableBorrowRate","totalRewards","totalRewardsETH","totalRewardsUSD","stableBorrowAPR","stableBorrowAPY","formatUserSummaryData","calculateReserveDebt","formatReserves","totalDebt","hasEmission","Math","floor","Date","now","aIncentivesAPY","calculateIncentivesAPY","vIncentivesAPY","sIncentivesAPY","supplyAPY","variableBorrowAPY","reserveFactor","variableBorrowAPR","supplyAPR","calculateReserveDebtSuppliesRaw","emissionPerSecond","rewardTokenPriceInEth","tokenTotalSupplyNormalized","tokenPriceInEth","emissionPerYear","totalSupplyNormalized","principalUserBalance","reserveIndex","userIndex","precision","reserveIndexTimestamp","totalSupply","currentReserveIndex","InterestRate","Market","Network","ChainId","eEthereumTxType","ProtocolAction","GovernanceVote","Stake","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","value","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","DEFAULT_NULL_VALUE_ON_TX","from","toHexString","DEFAULT_APPROVE_AMOUNT","constants","MaxUint256","MAX_UINT_AMOUNT","API_ETH_MOCK_ADDRESS","gasLimitRecommendations","limit","recommended","deposit","withdraw","liquidationCall","liquidationFlash","repay","borrowETH","withdrawETH","swapCollateral","repayCollateral","cosntantAddressesByNetwork","mainnet","SYNTHETIX_PROXY_ADDRESS","IAaveGovernanceV2__factory","connect","address","signerOrProvider","Contract","_abi","anonymous","inputs","indexed","internalType","outputs","stateMutability","components","IAaveIncentivesController__factory","IAaveStakingHelper__factory","IDebtTokenBase__factory","IERC20Detailed__factory","IFaucet__factory","IGovernancePowerDelegationToken__factory","IGovernanceStrategy__factory","IGovernanceV2Helper__factory","ILendingPool__factory","ILendToAaveMigrator__factory","IMinter__factory","IRepayWithCollateral__factory","IStakedToken__factory","IParaSwapLiquiditySwapAdapter__factory","ISynthetix__factory","IWETHGateway__factory","parseNumber","getTxValue","toLowerCase","mintAmountsPerToken","AAVE","BAT","BUSD","DAI","ENJ","KNC","LEND","LINK","MANA","MKR","WETH","REN","REP","SNX","SUSD","TUSD","UNI","USDC","USDT","WBTC","YFI","ZRX","UNIUSDC","UNIDAI","UNIUSDT","UNIDAIETH","UNIUSDCETH","UNISETHETH","UNILENDETH","UNILINKETH","UNIMKRETH","canBeEnsAddress","ensAddress","endsWith","isEthAddressMetadataKey","isEthAddressOrENSMetadataKey","isPositiveMetadataKey","isPositiveOrMinusOneMetadataKey","is0OrPositiveMetadataKey","optionalMetadataKey","IsEthAddress","field","target","propertyKey","parameterIndex","existingPossibleAddresses","Reflect","getOwnMetadata","defineMetadata","IsEthAddressOrENS","IsPositiveAmount","params","Is0OrPositiveAmount","IsPositiveOrMinusOneAmount","optionalValidator","propertyName","methodArguments","optionalParameters","isParamOptional","isEthAddressValidator","addressParameters","storedParams","utils","isAddress","isEthAddressOrEnsValidator","amountGtThan0Validator","amountParameters","Number","amount0OrPositiveValidator","amountGtThan0OrMinus1","amountMinusOneParameters","LPValidator","descriptor","lendingPoolConfig","LENDING_POOL","arguments","apply","console","StakingValidator","stakingConfig","TOKEN_STAKING","STAKING_REWARD_TOKEN","WETHValidator","WETH_GATEWAY","wethGatewayConfig","GovValidator","governanceConfig","AAVE_GOVERNANCE_V2","AAVE_GOVERNANCE_V2_HELPER","AAVE_GOVERNANCE_V2_EXECUTOR_SHORT","AAVE_GOVERNANCE_V2_EXECUTOR_LONG","GovDelegationValidator","estimateGasByNetwork","tx","config","gasSurplus","provider","estimateGas","estimatedGas","network","polygon","add","mul","getGasPrice","BaseService","contractFactory","_this","contractInstances","rawTxMethod","action","gasLimit","lte","txs","txCallback","force","gasPrice","txType","ERC20_APPROVAL","gasPriceProv","augustusFromAmountOffsetFromCalldata","calldata","LiquiditySwapAdapterService","swapCollateralConfig","liquiditySwapAdapterAddress","SWAP_COLLATERAL_ADAPTER","swapAndDeposit","user","assetToSwapFrom","assetToSwapTo","amountToSwap","minAmountToReceive","permitParams","augustus","swapCallData","swapAll","liquiditySwapContract","getContractInstance","generateTxCallback","populateTransaction","DLP_ACTION","gas","generateTxPriceEstimation","__decorate","__param","buildParaSwapLiquiditySwapParams","swapAllBalanceOffset","swapCalldata","permitAmount","deadline","v","r","s","defaultAbiCoder","encode","LendingPool","erc20Service","synthetixService","wethGatewayService","liquiditySwapAdapterService","repayWithCollateralAdapterService","market","FLASH_LIQUIDATION_ADAPTER","REPAY_WITH_COLLATERAL_ADAPTER","lendingPoolAddress","flashLiquidationAddress","swapCollateralAddress","repayWithCollateralAddress","onBehalfOf","referralCode","depositETH","lendingPool","isApproved","approve","decimalsOf","convertedAmount","synthetixValidation","approveTx","lendingPoolContract","aTokenAddress","borrow","interestRateMode","debtTokenAddress","formatAmount","numericRateMode","repayETH","swapBorrowRateMode","setUsageAsCollateral","usageAsCollateral","setUserUseReserveAsCollateral","liquidator","liquidatedUser","debtReserve","collateralReserve","purchaseAmount","getAToken","liquidateAll","getTokenData","all","flash","fromAsset","fromAToken","toAsset","fromAmount","minToAmount","permitSignature","tokenDecimals","amountSlippageConverted","amountWithSurplus","convertedAmountWithSurplus","flashLoan","_this2","repayWithCollateral","assetToRepay","repayWithAmount","repayAmount","repayAllDebt","rateMode","useEthPath","convertedRepayWithAmount","repayAmountWithSurplus","convertedRepayAmount","numericInterestRate","Stable","_this3","swapAndRepayTx","swapAndRepay","collateralAsset","debtAsset","collateralAmount","debtRepayAmount","debtRateMode","permit","flashLiquidation","borrowedAsset","debtTokenCover","initiator","addSurplus","convertedDebt","convertedDebtTokenCover","flashBorrowAmount","_this4","ERC20Service","token","spender","erc20Contract","userAddress","allowance","amountBNWithDecimals","gte","nameGetter","symbolGetter","decimalsGetter","FaucetService","faucetConfig","faucetAddress","FAUCET","faucetContract","mint","tokenSymbol","FAUCET_MINT","_this$faucetConfig","LTAMigratorService","migratorConfig","migratorAddress","LEND_TO_AAVE_MIGRATOR","migrateLendToAave","migratorContract","lendToken","migrateFromLEND","MIGRATION_LEND_AAVE","StakingService","tokenStake","STAKING_HELPER","stakingContractAddress","stakingRewardTokenContractAddress","stakingHelperContractAddress","stakingHelperContract","signStaking","nonce","stakingContract","STAKED_TOKEN","stakedToken","typeData","types","EIP712Domain","Permit","primaryType","domain","version","chainId","verifyingContract","message","owner","JSON","stringify","stakeWithPermit","signature","sig","splitSignature","stake","STAKE_ACTION","redeem","cooldown","claimRewards","REWARD_TOKEN","existingOptionalParameters","SynthetixService","toUpperCase","synthAddress","isSnxTransferable","synthContract","transferableSynthetix","transferableAmount","IncentivesController","incentivesConfig","INCENTIVES_CONTROLLER_REWARD_TOKEN","incentivesControllerAddress","INCENTIVES_CONTROLLER","incentivesControllerRewardTokenAddress","assets","to","incentivesContract","REWARD_ACTION","defaultConfig","governance","kovan","proto","amm","mumbai","staking","aave","balancer","incentives","migrator","BaseTxBuilder","injectedProvider","defaultProviderKeys","faucets","configuration","txBuilderConfig","_this$txBuilderConfig","_this$txBuilderConfig2","stakings","_this$txBuilderConfig3","_this$txBuilderConfig4","providers","StaticJsonRpcProvider","Provider","Web3Provider","ethers","getDefaultProvider","log","ltaMigratorService","_this$txBuilderConfig5","incentiveService","_this$txBuilderConfig6","WETHGatewayService","baseDebtTokenService","wethGatewayAddress","wethGatewayContract","isDelegationApproved","approveDelegationTx","approveDelegation","ExecutorType","ProposalState","BaseDebtToken","delegatee","debtTokenContract","allowanceGiver","allowanceReceiver","borrowAllowance","delegatedAllowance","RepayWithCollateralAdapterService","repayWithCollateralConfig","repayWithCollateralContract","getLink","hash","ipfsEndpoint","MEMORIZE","getProposalMetadata","ipfsHash","base58","Buffer","axios","get","timeout","data","title","description","shortDescription","_context","parseProposal","rawProposal","creator","executor","targets","signatures","calldatas","withDelegatecalls","startBlock","endBlock","executionTime","forVotes","againstVotes","executed","canceled","strategy","ipfsHex","totalVotingSupply","minimumQuorum","minimumDiff","executionTimeWithGracePeriod","proposalCreated","proposalState","proposalMetadata","proposal","AaveGovernanceV2Service","aaveGovernanceV2Address","aaveGovernanceV2HelperAddress","executors","Short","Long","withDelegateCalls","govContract","GOVERNANCE_ACTION","cancel","proposalId","queue","execute","submitVote","support","signVoting","VoteEmitted","submitVoteBySignature","getProposals","skip","helper","proposals","getProposal","getPropositionPowerAt","block","proposalStrategy","formatEther","getVotingPowerAt","getTotalPropositionSupplyAt","getTotalVotingSupplyAt","getTokensPower","tokens","power","getVoteOnProposal","GovernanceDelegationTokenService","_BaseService","governanceDelegationToken","governanceToken","getDelegateeAddress","delegateeAddress","GOV_DELEGATION_ACTION","delegateByType","delegationType","delegateBySig","expiry","getNonce","delegateByTypeBySig","prepareDelegateSignature","governanceTokenName","Delegate","prepareDelegateByTypeSignature","DelegateByType","getDelegateeByType","delegator","getPowerCurrent","getPowerAtBlock","blockNumber","_nonces","resolveName","TxBuilder","repayWithCollateralAdapters","swapCollateralAdapters","wethGateways","lendingPools","getWethGateway","getSwapCollateralAdapter","getRepayWithCollateralAdapter","_this$txBuilderConfig7","_this$txBuilderConfig8","aaveGovernanceV2Service","_this$txBuilderConfig9","governanceDelegationTokenService"],"mappings":"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,YACdnE,KAAM,SACNzD,KAAM,aAER,CACE4H,aAAc,WACdnE,KAAM,aACNzD,KAAM,YAER,CACE4H,aAAc,UACdnE,KAAM,YACNzD,KAAM,WAER,CACE4H,aAAc,SACdnE,KAAM,oBACNzD,KAAM,UAER,CACE4H,aAAc,UACdnE,KAAM,aACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,WACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,gBACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,WACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,eACNzD,KAAM,WAER,CACE4H,aAAc,OACdnE,KAAM,WACNzD,KAAM,QAER,CACE4H,aAAc,OACdnE,KAAM,WACNzD,KAAM,QAER,CACE4H,aAAc,UACdnE,KAAM,WACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,WACNzD,KAAM,WAER,CACE4H,aAAc,uCACdnE,KAAM,gBACNzD,KAAM,UAGV4H,aAAc,2CACdnE,KAAM,gBACNzD,KAAM,UAGV8H,gBAAiB,OACjB9H,KAAM,YAER,CACE0H,OAAQ,CACN,CACEE,aAAc,UACdnE,KAAM,OACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,QACNzD,KAAM,WAER,CACE4H,aAAc,6BACdnE,KAAM,aACNzD,KAAM,YAGVyD,KAAM,eACNoE,QAAS,CACP,CACEE,WAAY,CACV,CACEH,aAAc,UACdnE,KAAM,oBACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,gBACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,cACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,+BACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,kBACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,KACNzD,KAAM,WAER,CACE4H,aAAc,UACdnE,KAAM,UACNzD,KAAM,WAER,CACE4H,aAAc,iCACdnE,KAAM,WACNzD,KAAM,WAER,CACE4H,aAAc,YACdnE,KAAM,UACNzD,KAAM,aAER,CACE4H,aAAc,YAC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"}